id	model	language	prompt_type	prompt	Generated	Gold Standard	Decision							
71	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q8337> <http://www.wikidata.org/prop/direct/P50> ?uri}   Where:  http://www.wikidata.org/entity/Q8337 has human-readable name "Harry Potter."  http://www.wikidata.org/prop/direct/P50 has human-readable name "author."  Transform the SPARQL query to a natural language question. Output just the transformed question. Who wrote Harry Potter?   ----End Example ----  Having a SPARQL query: SELECT ?s1 where  { ?s1 <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q389459> }    Where:  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q389459 has human-readable name "Mars rover."  Transform the SPARQL query to a natural language question. Output just the transformed question	What are the instances of Mars rover?	Give me all spacecrafts that flew to Mars.	Yes			equal to GPT-3 one shot, rating: Yes				
122	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?n WHERE { wd:Q4138  wdt:P4511 ?n }   Where:  wd:Q4138 has human-readable name "Chiemsee."  wdt:P4511 has human-readable name "vertical depth."  Transform the SPARQL query to a natural language question. Output just the transformed question. How deep is Lake Chiemsee?   ----End Example ----  Having a SPARQL query:  SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q91>  <http://www.wikidata.org/prop/direct/P26>  ?o1 .  }   Where:  http://www.wikidata.org/entity/Q91 has human-readable name "Abraham Lincoln."  http://www.wikidata.org/prop/direct/P26 has human-readable name "spouse."  Transform the SPARQL query to a natural language question. Output just the transformed question	Who was Abraham Lincoln's spouse?	Who was the wife of President Lincoln?	Yes			equal to GPT-3 one shot, rating: Yes				equal to Mistral one shot, rating: Not done
59	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX pq: <http://www.wikidata.org/prop/qualifier/> PREFIX ps: <http://www.wikidata.org/prop/statement/> PREFIX p: <http://www.wikidata.org/prop/> SELECT ?res WHERE { ?res wdt:P175 wd:Q483407 . ?res p:P1433 _:a ._:a pq:P2868 wd:Q13432985 . }   Where:  wdt:P175 has human-readable name "performer."  wd:Q483407 has human-readable name "Ramones."  p:P1433 has human-readable name "published in."  pq:P2868 has human-readable name "subject has role."  wd:Q13432985 has human-readable name "B-side."  Transform the SPARQL query to a natural language question. Output just the transformed question. Give me all B-sides of the Ramones.   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?uri WHERE {  ?uri <http://www.wikidata.org/prop/direct/P522> <http://www.wikidata.org/entity/Q737809> . }   Where:  http://www.wikidata.org/prop/direct/P522 has human-readable name "type of orbit."  http://www.wikidata.org/entity/Q737809 has human-readable name "heliocentric orbit."  Transform the SPARQL query to a natural language question. Output just the transformed question	What are all the objects with a heliocentric orbit?	Which space probes were sent into orbit around the sun?	Yes			equal to GPT-3 one shot, rating: Yes				
212	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q43653> <http://www.wikidata.org/prop/direct/P1029> ?uri}   Where:  http://www.wikidata.org/entity/Q43653 has human-readable name "Apollo 11."  http://www.wikidata.org/prop/direct/P1029 has human-readable name "crew member(s)."  Transform the SPARQL query to a natural language question. Output just the transformed question. Who was on the Apollo 11 mission?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE {  ?type wdt:P279* wd:Q4830453 . ?aerospace wdt:P279* wd:Q3477363 . ?healthcare wdt:P279* wd:Q15067276 . ?pharma wdt:P279* wd:Q507443 . ?uri wdt:P452 ?aerospace ; wdt:P452 ?healthcare . }   Where:  wdt:P279 has human-readable name "subclass of."  wd:Q4830453 has human-readable name "business."  wdt:P279 has human-readable name "subclass of."  wd:Q3477363 has human-readable name "aerospace manufacturer."  wdt:P279 has human-readable name "subclass of."  wd:Q15067276 has human-readable name "health care industry."  wdt:P279 has human-readable name "subclass of."  wd:Q507443 has human-readable name "pharmaceutical industry."  wdt:P452 has human-readable name "industry."  wdt:P452 has human-readable name "industry."  Transform the SPARQL query to a natural language question. Output just the transformed question	What industries are related to aerospace, healthcare, and pharmaceuticals?	Which companies work in the aerospace industry as well as in medicine?	Yes			equal to GPT-3 one shot, rating: Yes				
113	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q43653> <http://www.wikidata.org/prop/direct/P1029> ?uri}   Where:  http://www.wikidata.org/entity/Q43653 has human-readable name "Apollo 11."  http://www.wikidata.org/prop/direct/P1029 has human-readable name "crew member(s)."  Transform the SPARQL query to a natural language question. Output just the transformed question. Who was on the Apollo 11 mission?   ----End Example ----  Having a SPARQL query:  SELECT ?s1 WHERE { ?s1  <http://www.wikidata.org/prop/direct/P17>  <http://www.wikidata.org/entity/Q183> .  ?s1 <http://www.wikidata.org/prop/direct/P31>  <http://www.wikidata.org/entity/Q515> .  ?s1  <http://www.wikidata.org/prop/direct/P1082>  ?o1 . FILTER ( ?o1 > "250000"^^<http://www.w3.org/2001/XMLSchema#integer>)}   Where:  http://www.wikidata.org/prop/direct/P17 has human-readable name "country."  http://www.wikidata.org/entity/Q183 has human-readable name "Germany."  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q515 has human-readable name "city."  http://www.wikidata.org/prop/direct/P1082 has human-readable name "population."  http://www.w3.org/2001/XMLSchema#integer has human-readable name "integer."  Transform the SPARQL query to a natural language question. Output just the transformed question	Which cities in Germany have a population greater than 250,000?	Which German cities have more than 250000 inhabitants?	Yes		equal to GPT-3 zero shot, rated Yes	equal to GPT-3 one shot, rating: Yes		equal to GPT-4 one shot, rating: Yes	equal to Mistral zero shot, rating: Yes	
148	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT ?s1 where  { ?s1 <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q389459> }    Where:  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q389459 has human-readable name "Mars rover."  Transform the SPARQL query to a natural language question. Output just the transformed question. Give me all spacecrafts that flew to Mars.   ----End Example ----  Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 . ?uri wdt:P2046 ?area . } ORDER BY DESC(?area) LIMIT 1   Where:  wdt:P31 has human-readable name "instance of."  wd:Q35657 has human-readable name "U.S. state."  wdt:P2046 has human-readable name "area."  Transform the SPARQL query to a natural language question. Output just the transformed question	What is the largest U.S. state by area?	What is the largest state in the United States?	Yes			equal to GPT-3 one shot, rating: Yes	equal to GPT-4 zero shot, rating: Yes	equal to GPT-4 one shot, rating: Yes		
151	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q164791>  <http://www.wikidata.org/prop/direct/P570>  ?o1 .  }   Where:  http://www.wikidata.org/entity/Q164791 has human-readable name "Carlo Giuliani."  http://www.wikidata.org/prop/direct/P570 has human-readable name "date of death."  Transform the SPARQL query to a natural language question. Output just the transformed question. When was Carlo Giuliani shot?   ----End Example ----  Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX pq: <http://www.wikidata.org/prop/qualifier/> PREFIX ps: <http://www.wikidata.org/prop/statement/> PREFIX p: <http://www.wikidata.org/prop/> SELECT ?res WHERE { ?res wdt:P175 wd:Q483407 . ?res p:P1433 _:a ._:a pq:P2868 wd:Q13432985 . }   Where:  wdt:P175 has human-readable name "performer."  wd:Q483407 has human-readable name "Ramones."  p:P1433 has human-readable name "published in."  pq:P2868 has human-readable name "subject has role."  wd:Q13432985 has human-readable name "B-side."  Transform the SPARQL query to a natural language question. Output just the transformed question	When was a song performed by Ramones published as a B-side?	Give me all B-sides of the Ramones.	Yes			equal to GPT-3 one shot, rating: Yes				
22	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P141 wd:Q219127 }   Where:  wdt:P141 has human-readable name "IUCN conservation status."  wd:Q219127 has human-readable name "Critically Endangered."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which animals are critically endangered?   ----End Example ----  Having a SPARQL query: SELECT (COUNT(DISTINCT ?uri) as ?count) WHERE { <http://www.wikidata.org/entity/Q83233> <http://www.wikidata.org/prop/direct/P40>/<http://www.wikidata.org/prop/direct/P40> ?uri }   Where:  http://www.wikidata.org/entity/Q83233 has human-readable name "Jacques Cousteau."  http://www.wikidata.org/prop/direct/P40 has human-readable name "child."  http://www.wikidata.org/prop/direct/P40 has human-readable name "child."  Transform the SPARQL query to a natural language question. Output just the transformed question	How many children does Jacques Cousteau have?	How many grand-children did Jacques Cousteau have?	No		equal to GPT-3 zero shot, rated No	equal to GPT-3 one shot, rating: No				
97	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT * { wd:Q1124 wdt:P40 ?child . ?child wdt:P26 ?uri }   Where:  wd:Q1124 has human-readable name "Bill Clinton."  wdt:P40 has human-readable name "child."  wdt:P26 has human-readable name "spouse."  Transform the SPARQL query to a natural language question. Output just the transformed question. Who is the daughter of Bill Clinton married to?   ----End Example ----  Having a SPARQL query: PREFIX p: <http://www.wikidata.org/prop/> PREFIX ps: <http://www.wikidata.org/prop/statement/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q162371 p:P161/ps:P161/wdt:P856 ?uri . }   Where:  wd:Q162371 has human-readable name "Charmed."  p:P161 has human-readable name "cast member."  ps:P161 has human-readable name "cast member."  wdt:P856 has human-readable name "official website."  Transform the SPARQL query to a natural language question. Output just the transformed question	What is the official website of the cast member of the TV show Charmed?	Give me the official websites of actors of the television show Charmed.	Yes			equal to GPT-3 one shot, rating: Yes				
173	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?date WHERE { wd:Q471891 wdt:P571 ?date . }    Where:  wd:Q471891 has human-readable name "De Beers."  wdt:P571 has human-readable name "inception."  Transform the SPARQL query to a natural language question. Output just the transformed question. When was the De Beers company founded?   ----End Example ----  Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX pq: <http://www.wikidata.org/prop/qualifier/> PREFIX p: <http://www.wikidata.org/prop/> PREFIX ps: <http://www.wikidata.org/prop/statement/> SELECT ?date WHERE { wd:Q33 p:P463 ?membership . ?membership pq:P580 ?date . ?membership ps:P463 wd:Q458 . }    Where:  wd:Q33 has human-readable name "Finland."  p:P463 has human-readable name "member of."  pq:P580 has human-readable name "start time."  ps:P463 has human-readable name "member of."  wd:Q458 has human-readable name "European Union."  Transform the SPARQL query to a natural language question. Output just the transformed question	When did Finland become a member of the European Union?	When did Finland join the EU?	Yes			equal to GPT-3 one shot, rating: Yes		equal to GPT-4 one shot, rating: Yes		
25	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT  (COUNT(DISTINCT ?o1) as ?count)  WHERE { <http://www.wikidata.org/entity/Q33760>  <http://www.wikidata.org/prop/direct/P166>  ?o1 . }    Where:  http://www.wikidata.org/entity/Q33760 has human-readable name "Bertrand Russell."  http://www.wikidata.org/prop/direct/P166 has human-readable name "award received."  Transform the SPARQL query to a natural language question. Output just the transformed question. How many awards has Bertrand Russell?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q4022> . ?uri <http://www.wikidata.org/prop/direct/P17> <http://www.wikidata.org/entity/Q148> . ?uri <http://www.wikidata.org/prop/direct/P2043> ?length } ORDER BY DESC(?length) LIMIT 1   Where:  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q4022 has human-readable name "river."  http://www.wikidata.org/prop/direct/P17 has human-readable name "country."  http://www.wikidata.org/entity/Q148 has human-readable name "People's Republic of China."  http://www.wikidata.org/prop/direct/P2043 has human-readable name "length."  Transform the SPARQL query to a natural language question. Output just the transformed question	What is the longest river in the People's Republic of China?	What is the longest river in China?	Yes			equal to GPT-3 one shot, rating: Yes	equal to GPT-4 zero shot, rating: Yes	equal to GPT-4 one shot, rating: Yes		
38	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q37156>  <http://www.wikidata.org/prop/direct/P2139>  ?o1 .  }   Where:  http://www.wikidata.org/entity/Q37156 has human-readable name "IBM."  http://www.wikidata.org/prop/direct/P2139 has human-readable name "total revenue."  Transform the SPARQL query to a natural language question. Output just the transformed question. What is the revenue of IBM?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { { wd:Q76936 wdt:P527+ ?uri . } UNION { wd:Q76936 wdt:P527* ?islandgroup . ?uri wdt:P361+ ?islandgroup . } ?uri wdt:P17 wd:Q55 . ?uri wdt:P31 wd:Q23442 . }    Where:  wd:Q76936 has human-readable name "Frisian Islands."  wdt:P527 has human-readable name "has part(s)."  wd:Q76936 has human-readable name "Frisian Islands."  wdt:P527 has human-readable name "has part(s)."  wdt:P361 has human-readable name "part of."  wdt:P17 has human-readable name "country."  wd:Q55 has human-readable name "Netherlands."  wdt:P31 has human-readable name "instance of."  wd:Q23442 has human-readable name "island."  Transform the SPARQL query to a natural language question. Output just the transformed question	What are the islands in the Netherlands that are part of the Frisian Islands group?	Give me all Frisian islands that belong to the Netherlands.	Yes			equal to GPT-3 one shot, rating: Yes				
42	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { wd:Q125054 wdt:P355 ?uri }   Where:  wd:Q125054 has human-readable name "Aldi."  wdt:P355 has human-readable name "has subsidiary."  Transform the SPARQL query to a natural language question. Output just the transformed question. Who owns Aldi?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?cave wdt:P31 wd:Q35509 ; wdt:P17 ?uri . } GROUP BY ?uri HAVING (COUNT(?cave) > 2)   Where:  wdt:P31 has human-readable name "instance of."  wd:Q35509 has human-readable name "cave."  wdt:P17 has human-readable name "country."  Transform the SPARQL query to a natural language question. Output just the transformed question	Which countries have more than 2 caves?	Which countries have places with more than two caves?	Yes			equal to GPT-3 one shot, rating: Yes				
188	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q19024> <http://www.wikidata.org/prop/direct/P585> ?uri}   Where:  http://www.wikidata.org/entity/Q19024 has human-readable name "Boston Tea Party."  http://www.wikidata.org/prop/direct/P585 has human-readable name "point in time."  Transform the SPARQL query to a natural language question. Output just the transformed question. When did the Boston Tea Party take place?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { wd:Q25161472 wdt:P856 ?uri }    Where:  wd:Q25161472 has human-readable name "Forbes."  wdt:P856 has human-readable name "official website."  Transform the SPARQL query to a natural language question. Output just the transformed question	What is the official website of Forbes?	Give me the homepage of Forbes.	Yes		equal to GPT-3 zero shot, rated Yes	equal to GPT-3 one shot, rating: Yes	equal to GPT-4 zero shot, rating: Yes	equal to GPT-4 one shot, rating: Yes	equal to Mistral zero shot, rating: Yes	equal to Mistral one shot, rating: Not done
19	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { wd:Q25161472 wdt:P856 ?uri }    Where:  wd:Q25161472 has human-readable name "Forbes."  wdt:P856 has human-readable name "official website."  Transform the SPARQL query to a natural language question. Output just the transformed question. Give me the homepage of Forbes.   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q9696> <http://www.wikidata.org/prop/P39> ?position . ?position  <http://www.wikidata.org/prop/statement/P39> <http://www.wikidata.org/entity/Q11696> . ?position <http://www.wikidata.org/prop/qualifier/P1366> ?uri . }   Where:  http://www.wikidata.org/entity/Q9696 has human-readable name "John F. Kennedy."  http://www.wikidata.org/prop/P39 has human-readable name "position held."  http://www.wikidata.org/prop/statement/P39 has human-readable name "position held."  http://www.wikidata.org/entity/Q11696 has human-readable name "President of the United States."  http://www.wikidata.org/prop/qualifier/P1366 has human-readable name "replaced by."  Transform the SPARQL query to a natural language question. Output just the transformed question	Who replaced John F. Kennedy as the President of the United States?	Who became president after JFK died?	Yes			equal to GPT-3 one shot, rating: Yes	equal to GPT-4 zero shot, rating: Yes	equal to GPT-4 one shot, rating: Yes		
29	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?date WHERE { wd:Q536133 wdt:P571 ?date . }    Where:  wd:Q536133 has human-readable name "Jack Wolfskin."  wdt:P571 has human-readable name "inception."  Transform the SPARQL query to a natural language question. Output just the transformed question. When was Jack Wolfskin founded?   ----End Example ----  Having a SPARQL query:  SELECT DISTINCT ?s1 WHERE { <http://www.wikidata.org/entity/Q458>  <http://www.wikidata.org/prop/direct/P150>  ?s1 .  ?s1  <http://www.wikidata.org/prop/direct/P38>  <http://www.wikidata.org/entity/Q4916> . }   Where:  http://www.wikidata.org/entity/Q458 has human-readable name "European Union."  http://www.wikidata.org/prop/direct/P150 has human-readable name "contains the administrative territorial entity."  http://www.wikidata.org/prop/direct/P38 has human-readable name "currency."  http://www.wikidata.org/entity/Q4916 has human-readable name "euro."  Transform the SPARQL query to a natural language question. Output just the transformed question	What administrative territorial entities are contained within the European Union that use the euro as currency?	Which countries in the European Union adopted the Euro?	Yes			equal to GPT-3 one shot, rating: Yes				
199	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT  (COUNT(DISTINCT ?o1) as ?count)  WHERE { <http://www.wikidata.org/entity/Q33760>  <http://www.wikidata.org/prop/direct/P166>  ?o1 . }    Where:  http://www.wikidata.org/entity/Q33760 has human-readable name "Bertrand Russell."  http://www.wikidata.org/prop/direct/P166 has human-readable name "award received."  Transform the SPARQL query to a natural language question. Output just the transformed question. How many awards has Bertrand Russell?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri { ?uri wdt:P31 wd:Q11424 . ?uri wdt:P495 wd:Q414 }   Where:  wdt:P31 has human-readable name "instance of."  wd:Q11424 has human-readable name "film."  wdt:P495 has human-readable name "country of origin."  wd:Q414 has human-readable name "Argentina."  Transform the SPARQL query to a natural language question. Output just the transformed question	Which films from Argentina are there?	Give me all Argentine films.	Yes			equal to GPT-3 one shot, rating: Yes				
149	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q37156>  <http://www.wikidata.org/prop/direct/P2139>  ?o1 .  }   Where:  http://www.wikidata.org/entity/Q37156 has human-readable name "IBM."  http://www.wikidata.org/prop/direct/P2139 has human-readable name "total revenue."  Transform the SPARQL query to a natural language question. Output just the transformed question. What is the revenue of IBM?   ----End Example ----  Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?uri { ?uri wdt:P31 wd:Q35657 . ?uri wdt:P1082 ?population . ?uri wdt:P2046 ?area . BIND((?population/?area) AS ?density ) } ORDER BY DESC(?density) LIMIT 1   Where:  wdt:P31 has human-readable name "instance of."  wd:Q35657 has human-readable name "U.S. state."  wdt:P1082 has human-readable name "population."  wdt:P2046 has human-readable name "area."  Transform the SPARQL query to a natural language question. Output just the transformed question	What is the most densely populated U.S. state?	Which U.S. state has the highest population density?	Yes			equal to GPT-3 one shot, rating: Yes				
152	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri ?x ?y  WHERE { wd:Q584  wdt:P17 ?uri . ?uri wdt:P31 wd:Q6256 . }    Where:  wd:Q584 has human-readable name "Rhine."  wdt:P17 has human-readable name "country."  wdt:P31 has human-readable name "instance of."  wd:Q6256 has human-readable name "country."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which countries are connected by the Rhine?   ----End Example ----  Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q131734 . ?uri wdt:P159*/wdt:P31*/wdt:P131 wd:Q1198 . }    Where:  wdt:P31 has human-readable name "instance of."  wd:Q131734 has human-readable name "brewery."  wdt:P159 has human-readable name "headquarters location."  wdt:P31 has human-readable name "instance of."  wdt:P131 has human-readable name "located in the administrative territorial entity."  wd:Q1198 has human-readable name "North Rhine-Westphalia."  Transform the SPARQL query to a natural language question. Output just the transformed question	Which breweries have their headquarters located in North Rhine-Westphalia?	Which beer brewing companies are located in North-Rhine Westphalia?	Yes			equal to GPT-3 one shot, rating: Yes				
213	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q2263>  <http://www.wikidata.org/prop/direct/P26>  ?o1 .  }   Where:  http://www.wikidata.org/entity/Q2263 has human-readable name "Tom Hanks."  http://www.wikidata.org/prop/direct/P26 has human-readable name "spouse."  Transform the SPARQL query to a natural language question. Output just the transformed question. Who was Tom Hanks married to?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?uri WHERE {  ?uri <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q11424> . { ?uri <http://www.wikidata.org/prop/direct/P495> <http://www.wikidata.org/entity/Q213> . } UNION { ?uri <http://www.wikidata.org/prop/direct/P495> <http://www.wikidata.org/entity/Q33946> . } }   Where:  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q11424 has human-readable name "film."  http://www.wikidata.org/prop/direct/P495 has human-readable name "country of origin."  http://www.wikidata.org/entity/Q213 has human-readable name "Czech Republic."  http://www.wikidata.org/prop/direct/P495 has human-readable name "country of origin."  http://www.wikidata.org/entity/Q33946 has human-readable name "Czechoslovakia."  Transform the SPARQL query to a natural language question. Output just the transformed question	Which distinct URIs represent films that originate from either Czech Republic or Czechoslovakia?	Show me all Czech movies.	Yes			equal to GPT-3 one shot, rating: Yes				
165	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q91>  <http://www.wikidata.org/prop/direct/P26>  ?o1 .  }   Where:  http://www.wikidata.org/entity/Q91 has human-readable name "Abraham Lincoln."  http://www.wikidata.org/prop/direct/P26 has human-readable name "spouse."  Transform the SPARQL query to a natural language question. Output just the transformed question. Who was the wife of President Lincoln?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri ?institute WHERE { wd:Q76 wdt:P26/wdt:P69/wdt:P361* ?uri . ?uri wdt:P31*/wdt:P279* wd:Q3918 . }   Where:  wd:Q76 has human-readable name "Barack Obama."  wdt:P26 has human-readable name "spouse."  wdt:P69 has human-readable name "educated at."  wdt:P361 has human-readable name "part of."  wdt:P31 has human-readable name "instance of."  wdt:P279 has human-readable name "subclass of."  wd:Q3918 has human-readable name "university."  Transform the SPARQL query to a natural language question. Output just the transformed question	What universities are part of the educational background of Barack Obama?	What is the name of the university where Obama's wife studied?	Yes			equal to GPT-3 one shot, rating: Yes				
4	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: ASK where { <http://www.wikidata.org/entity/Q83325> <http://www.wikidata.org/prop/direct/P1576> <http://www.wikidata.org/entity/Q83364>}   Where:  http://www.wikidata.org/entity/Q83325 has human-readable name "Pamela Anderson."  http://www.wikidata.org/prop/direct/P1576 has human-readable name "lifestyle."  http://www.wikidata.org/entity/Q83364 has human-readable name "vegetarianism."  Transform the SPARQL query to a natural language question. Output just the transformed question. Is Pamela Anderson a vegan?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?s1 WHERE { ?s1  ?p1  <http://www.wikidata.org/entity/Q1248784> . ?s1  <http://www.wikidata.org/prop/direct/P276>  <http://www.wikidata.org/entity/Q99> .  }   Where:  http://www.wikidata.org/entity/Q1248784 has human-readable name "airport."  http://www.wikidata.org/prop/direct/P276 has human-readable name "location."  http://www.wikidata.org/entity/Q99 has human-readable name "California."  Transform the SPARQL query to a natural language question. Output just the transformed question	Which airports are located in California?	Which airports are located in California, USA?	Yes			equal to GPT-3 one shot, rating: Yes		equal to GPT-4 one shot, rating: Yes		equal to Mistral one shot, rating: Not done
120	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q7934>  <http://www.wikidata.org/prop/direct/P106>  ?o1 .  }   Where:  http://www.wikidata.org/entity/Q7934 has human-readable name "Frank Herbert."  http://www.wikidata.org/prop/direct/P106 has human-readable name "occupation."  Transform the SPARQL query to a natural language question. Output just the transformed question. What is the profession of Frank Herbert?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT * { wd:Q1124 wdt:P40 ?child . ?child wdt:P26 ?uri }   Where:  wd:Q1124 has human-readable name "Bill Clinton."  wdt:P40 has human-readable name "child."  wdt:P26 has human-readable name "spouse."  Transform the SPARQL query to a natural language question. Output just the transformed question	Who is the spouse of Bill Clinton's child?	Who is the daughter of Bill Clinton married to?	Yes			equal to GPT-3 one shot, rating: Yes				
201	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?date WHERE { wd:Q471891 wdt:P571 ?date . }    Where:  wd:Q471891 has human-readable name "De Beers."  wdt:P571 has human-readable name "inception."  Transform the SPARQL query to a natural language question. Output just the transformed question. When was the De Beers company founded?   ----End Example ----  Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?date WHERE { wd:Q948831 wdt:P571 ?date . }    Where:  wd:Q948831 has human-readable name "Plzeňský Prazdroj."  wdt:P571 has human-readable name "inception."  Transform the SPARQL query to a natural language question. Output just the transformed question	When was the Plzeňský Prazdroj company founded?	What is the founding year of the brewery that produces Pilsner Urquell?	Yes			equal to GPT-3 one shot, rating: Yes				
154	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri { wd:Q8962067 wdt:P131+ ?uri . }   Where:  wd:Q8962067 has human-readable name "Fort Knox."  wdt:P131 has human-readable name "located in the administrative territorial entity."  Transform the SPARQL query to a natural language question. Output just the transformed question. Where is Fort Knox located?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P50 wd:Q72653 . ?uri wdt:P136 ?genre . ?genre wdt:P279* wd:Q571 . }   Where:  wdt:P50 has human-readable name "author."  wd:Q72653 has human-readable name "Danielle Steel."  wdt:P136 has human-readable name "genre."  wdt:P279 has human-readable name "subclass of."  wd:Q571 has human-readable name "book."  Transform the SPARQL query to a natural language question. Output just the transformed question	What are the genres of books written by Danielle Steel?	Which books were written by Danielle Steel?	No			equal to GPT-3 one shot, rating: No				
13	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT DISTINCT ?num WHERE { <http://www.wikidata.org/entity/Q128446> <http://www.wikidata.org/prop/direct/P115>/<http://www.wikidata.org/prop/direct/P1083> ?num }   Where:  http://www.wikidata.org/entity/Q128446 has human-readable name "FC Porto."  http://www.wikidata.org/prop/direct/P115 has human-readable name "home venue."  http://www.wikidata.org/prop/direct/P1083 has human-readable name "maximum capacity."  Transform the SPARQL query to a natural language question. Output just the transformed question. How many seats does the home stadium of FC Porto have?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P106> <http://www.wikidata.org/entity/Q82955> . ?uri <http://www.wikidata.org/prop/direct/P26> ?spouse . { ?spouse <http://www.wikidata.org/prop/direct/P27> <http://www.wikidata.org/entity/Q183> . } UNION { ?spouse <http://www.wikidata.org/prop/direct/P19>/<http://www.wikidata.org/prop/direct/P17> <http://www.wikidata.org/entity/Q183> } }    Where:  http://www.wikidata.org/prop/direct/P106 has human-readable name "occupation."  http://www.wikidata.org/entity/Q82955 has human-readable name "politician."  http://www.wikidata.org/prop/direct/P26 has human-readable name "spouse."  http://www.wikidata.org/prop/direct/P27 has human-readable name "country of citizenship."  http://www.wikidata.org/entity/Q183 has human-readable name "Germany."  http://www.wikidata.org/prop/direct/P19 has human-readable name "place of birth."  http://www.wikidata.org/prop/direct/P17 has human-readable name "country."  http://www.wikidata.org/entity/Q183 has human-readable name "Germany."  Transform the SPARQL query to a natural language question. Output just the transformed question	Who are the spouses of politicians from Germany or born in Germany?	Which politicians were married to a German?	Yes			equal to GPT-3 one shot, rating: Yes				
163	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q91>  <http://www.wikidata.org/prop/direct/P26>  ?o1 .  }   Where:  http://www.wikidata.org/entity/Q91 has human-readable name "Abraham Lincoln."  http://www.wikidata.org/prop/direct/P26 has human-readable name "spouse."  Transform the SPARQL query to a natural language question. Output just the transformed question. Who was the wife of President Lincoln?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q11344 . }   Where:  wdt:P31 has human-readable name "instance of."  wd:Q11344 has human-readable name "chemical element."  Transform the SPARQL query to a natural language question. Output just the transformed question	What are the chemical elements in Wikidata?	Give me all chemical elements.	Yes			equal to GPT-3 one shot, rating: Yes				
177	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT DISTINCT ?uri WHERE { ?country <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q6256> . ?country  <http://www.wikidata.org/prop/direct/P30> <http://www.wikidata.org/entity/Q15> . ?country <http://www.wikidata.org/prop/direct/P36> ?uri . }   Where:  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q6256 has human-readable name "country."  http://www.wikidata.org/prop/direct/P30 has human-readable name "continent."  http://www.wikidata.org/entity/Q15 has human-readable name "Africa."  http://www.wikidata.org/prop/direct/P36 has human-readable name "capital."  Transform the SPARQL query to a natural language question. Output just the transformed question. Give me the capitals of all countries in Africa.   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri { wd:Q125050 wdt:P31 ?type . ?uri wdt:P31 ?type . ?uri wdt:P31/wdt:P279* wd:Q12280 . FILTER( ?type != wd:Q12280 ) }   Where:  wd:Q125050 has human-readable name "Manhattan Bridge."  wdt:P31 has human-readable name "instance of."  wdt:P31 has human-readable name "instance of."  wdt:P31 has human-readable name "instance of."  wdt:P279 has human-readable name "subclass of."  wd:Q12280 has human-readable name "bridge."  wd:Q12280 has human-readable name "bridge."  Transform the SPARQL query to a natural language question. Output just the transformed question	What are the types of structures related to the Manhattan Bridge that are not bridges?	Which bridges are of the same type as the Manhattan Bridge?	No			equal to GPT-3 one shot, rating: No				
176	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q43653> <http://www.wikidata.org/prop/direct/P1029> ?uri}   Where:  http://www.wikidata.org/entity/Q43653 has human-readable name "Apollo 11."  http://www.wikidata.org/prop/direct/P1029 has human-readable name "crew member(s)."  Transform the SPARQL query to a natural language question. Output just the transformed question. Who was on the Apollo 11 mission?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { wd:Q2246489 wdt:P170 ?uri }    Where:  wd:Q2246489 has human-readable name "The Storm on the Sea of Galilee."  wdt:P170 has human-readable name "creator."  Transform the SPARQL query to a natural language question. Output just the transformed question	Who is the creator of "The Storm on the Sea of Galilee"?	Who painted The Storm on the Sea of Galilee?	Yes		equal to GPT-3 zero shot, rated Yes	equal to GPT-3 one shot, rating: Yes	equal to GPT-4 zero shot, rating: Yes	equal to GPT-4 one shot, rating: Yes		
166	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> ASK WHERE { { ?uri wdt:P31 wd:Q23413. } UNION { ?uri wdt:P31 ?castlesubtype . ?castlesubtype wdt:P279* wd:Q23413 } ?uri wdt:P17 wd:Q30 }   Where:  wdt:P31 has human-readable name "instance of."  wd:Q23413 has human-readable name "castle."  wdt:P31 has human-readable name "instance of."  wdt:P279 has human-readable name "subclass of."  wd:Q23413 has human-readable name "castle."  wdt:P17 has human-readable name "country."  wd:Q30 has human-readable name "United States of America."  Transform the SPARQL query to a natural language question. Output just the transformed question. Are there any castles in the United States?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P106> <http://www.wikidata.org/entity/Q82594> . ?uri <http://www.wikidata.org/prop/direct/P166> ?award . ?award <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q19020> . }   Where:  http://www.wikidata.org/prop/direct/P106 has human-readable name "occupation."  http://www.wikidata.org/entity/Q82594 has human-readable name "computer scientist."  http://www.wikidata.org/prop/direct/P166 has human-readable name "award received."  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q19020 has human-readable name "Academy Awards."  Transform the SPARQL query to a natural language question. Output just the transformed question	Which computer scientists have received Academy Awards?	Which computer scientist won an oscar?	Yes			equal to GPT-3 one shot, rating: Yes				equal to Mistral one shot, rating: Not done
21	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q11344 . }   Where:  wdt:P31 has human-readable name "instance of."  wd:Q11344 has human-readable name "chemical element."  Transform the SPARQL query to a natural language question. Output just the transformed question. Give me all chemical elements.   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { wd:Q52 wdt:P170 ?uri . ?uri wdt:P31 wd:Q5 . }   Where:  wd:Q52 has human-readable name "Wikipedia."  wdt:P170 has human-readable name "creator."  wdt:P31 has human-readable name "instance of."  wd:Q5 has human-readable name "human."  Transform the SPARQL query to a natural language question. Output just the transformed question	Who created humans mentioned in the Wikipedia article with ID Q52?	Who created English Wikipedia?	No			equal to GPT-3 one shot, rating: No				
95	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q471379> <http://www.wikidata.org/prop/direct/P527>/<http://www.wikidata.org/prop/direct/P276> ?uri . ?uri <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q207694>}   Where:  http://www.wikidata.org/entity/Q471379 has human-readable name "The Scream."  http://www.wikidata.org/prop/direct/P527 has human-readable name "has part(s)."  http://www.wikidata.org/prop/direct/P276 has human-readable name "location."  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q207694 has human-readable name "art museum."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which museum exhibits The Scream by Munch?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?team wdt:P118 wd:Q9448 . ?uri wdt:P54 ?team ; wdt:P569 ?dateOfBirth . } ORDER BY DESC(?dateOfBirth) LIMIT 1   Where:  wdt:P118 has human-readable name "league."  wd:Q9448 has human-readable name "Premier League."  wdt:P54 has human-readable name "member of sports team."  wdt:P569 has human-readable name "date of birth."  Transform the SPARQL query to a natural language question. Output just the transformed question	Which player born most recently is a member of a team in the Premier League?	Who is the youngest player in the Premier League?	Yes			equal to GPT-3 one shot, rating: Yes				
60	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q317521> <http://www.wikidata.org/prop/direct/P61> ?uri . }   Where:  http://www.wikidata.org/entity/Q317521 has human-readable name "Elon Musk."  http://www.wikidata.org/prop/direct/P61 has human-readable name "discoverer or inventor."  Transform the SPARQL query to a natural language question. Output just the transformed question. What is Elon Musk famous for?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q1439 wdt:P1313 wd:Q5589725 . wd:Q5589725 wdt:P1308 ?uri . }   Where:  wd:Q1439 has human-readable name "Texas."  wdt:P1313 has human-readable name "office held by head of government."  wd:Q5589725 has human-readable name "Governor of Texas."  wd:Q5589725 has human-readable name "Governor of Texas."  wdt:P1308 has human-readable name "officeholder."  Transform the SPARQL query to a natural language question. Output just the transformed question	Who is the current Governor of Texas?	Who is the governor of Texas?	Yes			equal to GPT-3 one shot, rating: Yes				
206	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { wd:Q11185669 wdt:P279 ?uri . }   Where:  wd:Q11185669 has human-readable name "millipede."  wdt:P279 has human-readable name "subclass of."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which classes does the Millepede belong to?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { ?uri wdt:P276 wd:Q975 . ?uri wdt:P31 wd:Q178561 . ?uri wdt:P585 ?time . FILTER( YEAR(?time) = 1836 ) }    Where:  wdt:P276 has human-readable name "location."  wd:Q975 has human-readable name "San Antonio."  wdt:P31 has human-readable name "instance of."  wd:Q178561 has human-readable name "battle."  wdt:P585 has human-readable name "point in time."  Transform the SPARQL query to a natural language question. Output just the transformed question	When was the battle that took place in San Antonio in 1836?	What was the name of the famous battle in 1836 in San Antonio?	Yes			equal to GPT-3 one shot, rating: Yes				
101	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q8539> <http://www.wikidata.org/prop/direct/P161> ?uri}   Where:  http://www.wikidata.org/entity/Q8539 has human-readable name "The Big Bang Theory."  http://www.wikidata.org/prop/direct/P161 has human-readable name "cast member."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which actors play in Big Bang Theory?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ( COUNT( DISTINCT ?uri ) AS ?c ) WHERE { ?uri wdt:P112 wd:Q36215 . ?uri wdt:P31/wdt:P279* wd:Q783794 . }    Where:  wdt:P112 has human-readable name "founded by."  wd:Q36215 has human-readable name "Mark Zuckerberg."  wdt:P31 has human-readable name "instance of."  wdt:P279 has human-readable name "subclass of."  wd:Q783794 has human-readable name "company."  Transform the SPARQL query to a natural language question. Output just the transformed question	How many companies were founded by Mark Zuckerberg?	How many companies were founded by the founder of Facebook?	Yes		equal to GPT-3 zero shot, rated Yes	equal to GPT-3 one shot, rating: Yes		equal to GPT-4 one shot, rating: Yes		
78	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q45875 ?p ?uri . ?uri wdt:P106 wd:Q6625963 . }   Where:  wd:Q45875 has human-readable name "A Song of Ice and Fire."  wdt:P106 has human-readable name "occupation."  wd:Q6625963 has human-readable name "novelist."  Transform the SPARQL query to a natural language question. Output just the transformed question. Who is the novelist of the work a song of ice and fire?   ----End Example ----  Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?date WHERE { wd:Q471891 wdt:P571 ?date . }    Where:  wd:Q471891 has human-readable name "De Beers."  wdt:P571 has human-readable name "inception."  Transform the SPARQL query to a natural language question. Output just the transformed question	When was De Beers established?	When was the De Beers company founded?	Yes			equal to GPT-3 one shot, rating: Yes				
44	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT * WHERE { wd:Q191 wdt:P2936 ?lang . }   Where:  wd:Q191 has human-readable name "Estonia."  wdt:P2936 has human-readable name "language used."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which languages are spoken in Estonia?   ----End Example ----  Having a SPARQL query:  SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q458>  <http://www.wikidata.org/prop/direct/P150>  ?o1 . ?o1 <http://www.wikidata.org/prop/direct/P122>   <http://www.wikidata.org/entity/Q41614> }   Where:  http://www.wikidata.org/entity/Q458 has human-readable name "European Union."  http://www.wikidata.org/prop/direct/P150 has human-readable name "contains the administrative territorial entity."  http://www.wikidata.org/prop/direct/P122 has human-readable name "basic form of government."  http://www.wikidata.org/entity/Q41614 has human-readable name "constitutional monarchy."  Transform the SPARQL query to a natural language question. Output just the transformed question	What administrative territorial entity exists within the European Union that has a basic form of government as a constitutional monarchy?	Which European countries have a constitutional monarchy?	Yes			equal to GPT-3 one shot, rating: Yes				
138	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri { wd:Q125050 wdt:P31 ?type . ?uri wdt:P31 ?type . ?uri wdt:P31/wdt:P279* wd:Q12280 . FILTER( ?type != wd:Q12280 ) }   Where:  wd:Q125050 has human-readable name "Manhattan Bridge."  wdt:P31 has human-readable name "instance of."  wdt:P31 has human-readable name "instance of."  wdt:P31 has human-readable name "instance of."  wdt:P279 has human-readable name "subclass of."  wd:Q12280 has human-readable name "bridge."  wd:Q12280 has human-readable name "bridge."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which bridges are of the same type as the Manhattan Bridge?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?uri WHERE { ?country <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q6256> . ?country  <http://www.wikidata.org/prop/direct/P30> <http://www.wikidata.org/entity/Q15> . ?country <http://www.wikidata.org/prop/direct/P36> ?uri . }   Where:  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q6256 has human-readable name "country."  http://www.wikidata.org/prop/direct/P30 has human-readable name "continent."  http://www.wikidata.org/entity/Q15 has human-readable name "Africa."  http://www.wikidata.org/prop/direct/P36 has human-readable name "capital."  Transform the SPARQL query to a natural language question. Output just the transformed question	What is the capital of countries in Africa?	Give me the capitals of all countries in Africa.	Yes			equal to GPT-3 one shot, rating: Yes				
99	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> PREFIX p: <http://www.wikidata.org/prop/> PREFIX ps: <http://www.wikidata.org/prop/statement/> SELECT ?frequentflyer WHERE { ?airlines wdt:P31 wd:Q46970 . ?airlines p:P4446/ps:P4446 ?frequentflyer . }  GROUP BY ?frequentflyer ORDER BY DESC(COUNT(?airlines)) LIMIT 1   Where:  wdt:P31 has human-readable name "instance of."  wd:Q46970 has human-readable name "airline."  p:P4446 has human-readable name "reward program."  ps:P4446 has human-readable name "reward program."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which frequent flyer program has the most airlines?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?o1 WHERE { <http://www.wikidata.org/entity/Q23337>  <http://www.wikidata.org/prop/direct/P421>  ?o1 .  }   Where:  http://www.wikidata.org/entity/Q23337 has human-readable name "Salt Lake City."  http://www.wikidata.org/prop/direct/P421 has human-readable name "located in time zone."  Transform the SPARQL query to a natural language question. Output just the transformed question	In which time zone is Salt Lake City located?	What is the time zone of Salt Lake City?	Yes			equal to GPT-3 one shot, rating: Yes		equal to GPT-4 one shot, rating: Yes		
135	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 . ?uri wdt:P1813 ?name . FILTER( REGEX( ?name, "^MN$")) }    Where:  wdt:P31 has human-readable name "instance of."  wd:Q35657 has human-readable name "U.S. state."  wdt:P1813 has human-readable name "short name."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which U.S. state has the abbreviation MN?   ----End Example ----  Having a SPARQL query:  SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q2831>  <http://www.wikidata.org/prop/direct/P570>  ?o1 .  }    Where:  http://www.wikidata.org/entity/Q2831 has human-readable name "Michael Jackson."  http://www.wikidata.org/prop/direct/P570 has human-readable name "date of death."  Transform the SPARQL query to a natural language question. Output just the transformed question	When did Michael Jackson die?	When did Michael Jackson die?	Yes			equal to GPT-3 one shot, rating: Yes	equal to GPT-4 zero shot, rating: Yes	equal to GPT-4 one shot, rating: Yes		
134	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?c WHERE { wd:Q2 wdt:P2386 ?c. }   Where:  wd:Q2 has human-readable name "Earth."  wdt:P2386 has human-readable name "diameter."  Transform the SPARQL query to a natural language question. Output just the transformed question. How big is the earth's diameter?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q2695156> <http://www.wikidata.org/prop/direct/P460> ?uri . }   Where:  http://www.wikidata.org/entity/Q2695156 has human-readable name "Batman."  http://www.wikidata.org/prop/direct/P460 has human-readable name "said to be the same as."  Transform the SPARQL query to a natural language question. Output just the transformed question	Who is Batman said to be the same as?	What is Batman's real name?	Yes			equal to GPT-3 one shot, rating: Yes				
192	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT ?s1 WHERE { ?s1  <http://www.wikidata.org/prop/direct/P641> <http://www.wikidata.org/entity/Q842284> . ?s1  <http://www.wikidata.org/prop/direct/P19> ?o1 . ?o1 <http://www.wikidata.org/prop/direct/P131>* <http://www.wikidata.org/entity/Q34> . }   Where:  http://www.wikidata.org/prop/direct/P641 has human-readable name "sport."  http://www.wikidata.org/entity/Q842284 has human-readable name "skateboarding."  http://www.wikidata.org/prop/direct/P19 has human-readable name "place of birth."  http://www.wikidata.org/prop/direct/P131 has human-readable name "located in the administrative territorial entity."  http://www.wikidata.org/entity/Q34 has human-readable name "Sweden."  Transform the SPARQL query to a natural language question. Output just the transformed question. Give me all professional skateboarders from Sweden.   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q471379> <http://www.wikidata.org/prop/direct/P527>/<http://www.wikidata.org/prop/direct/P276> ?uri . ?uri <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q207694>}   Where:  http://www.wikidata.org/entity/Q471379 has human-readable name "The Scream."  http://www.wikidata.org/prop/direct/P527 has human-readable name "has part(s)."  http://www.wikidata.org/prop/direct/P276 has human-readable name "location."  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q207694 has human-readable name "art museum."  Transform the SPARQL query to a natural language question. Output just the transformed question	What are the art museums that house parts of "The Scream"?	Which museum exhibits The Scream by Munch?	No			equal to GPT-3 one shot, rating: No				
110	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P106 wd:Q36180 ; wdt:P166 wd:Q37922 . }   Where:  wdt:P106 has human-readable name "occupation."  wd:Q36180 has human-readable name "writer."  wdt:P166 has human-readable name "award received."  wd:Q37922 has human-readable name "Nobel Prize in Literature."  Transform the SPARQL query to a natural language question. Output just the transformed question. Give me all writers that won the Nobel Prize in literature.   ----End Example ----  Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT * WHERE { ?uri wdt:P57 wd:Q8006 . }    Where:  wdt:P57 has human-readable name "director."  wd:Q8006 has human-readable name "Akira Kurosawa."  Transform the SPARQL query to a natural language question. Output just the transformed question	Give me all movies directed by Akira Kurosawa.	Which movies did Kurosawa direct?	Yes			equal to GPT-3 one shot, rating: Yes				
143	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?uri WHERE { wd:Q9682 wdt:P22  ?uri . }   Where:  wd:Q9682 has human-readable name "Elizabeth II."  wdt:P22 has human-readable name "father."  Transform the SPARQL query to a natural language question. Output just the transformed question. Who was the father of Queen Elizabeth II?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?string WHERE { <http://www.wikidata.org/entity/Q64> <http://www.wikidata.org/prop/direct/P473> ?string . }   Where:  http://www.wikidata.org/entity/Q64 has human-readable name "Berlin."  http://www.wikidata.org/prop/direct/P473 has human-readable name "local dialing code."  Transform the SPARQL query to a natural language question. Output just the transformed question	What is the local dialing code of Berlin?	What is the area code of Berlin?	Yes			equal to GPT-3 one shot, rating: Yes				
156	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?c WHERE { wd:Q2 wdt:P2386 ?c. }   Where:  wd:Q2 has human-readable name "Earth."  wdt:P2386 has human-readable name "diameter."  Transform the SPARQL query to a natural language question. Output just the transformed question. How big is the earth's diameter?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri { wd:Q8962067 wdt:P131+ ?uri . }   Where:  wd:Q8962067 has human-readable name "Fort Knox."  wdt:P131 has human-readable name "located in the administrative territorial entity."  Transform the SPARQL query to a natural language question. Output just the transformed question	Where is Fort Knox located administratively?	Where is Fort Knox located?	Yes			equal to GPT-3 one shot, rating: Yes				
7	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT * WHERE { ?uri wdt:P31 wd:Q5 . ?uri wdt:P737 wd:Q913 . }   Where:  wdt:P31 has human-readable name "instance of."  wd:Q5 has human-readable name "human."  wdt:P737 has human-readable name "influenced by."  wd:Q913 has human-readable name "Socrates."  Transform the SPARQL query to a natural language question. Output just the transformed question. Who was influenced by Socrates?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT * WHERE { ?s1 <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q59773381> .  ?s1 <http://www.wikidata.org/prop/direct/P176> ?o1 . ?o1  <http://www.wikidata.org/prop/direct/P17>  <http://www.wikidata.org/entity/Q183> . ?o1  <http://www.wikidata.org/prop/direct/P31>  <http://www.wikidata.org/entity/Q786820> . }   Where:  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q59773381 has human-readable name "automobile model series."  http://www.wikidata.org/prop/direct/P176 has human-readable name "manufacturer."  http://www.wikidata.org/prop/direct/P17 has human-readable name "country."  http://www.wikidata.org/entity/Q183 has human-readable name "Germany."  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q786820 has human-readable name "automobile manufacturer."  Transform the SPARQL query to a natural language question. Output just the transformed question	What automobile manufacturers in Germany produce automobile model series?	Give me all cars that are produced in Germany.	Yes			equal to GPT-3 one shot, rating: Yes				
43	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT * { wd:Q843 wdt:P2936 ?uri . }   Where:  wd:Q843 has human-readable name "Pakistan."  wdt:P2936 has human-readable name "language used."  Transform the SPARQL query to a natural language question. Output just the transformed question. What languages are spoken in Pakistan?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?string WHERE { ?uri <http://www.wikidata.org/prop/direct/P31>/(<http://www.wikidata.org/prop/direct/P279>*) <http://www.wikidata.org/entity/Q4830453> . ?uri <http://www.wikidata.org/prop/direct/P1128> ?number . FILTER(?number > 500000) . ?uri <http://www.wikidata.org/prop/direct/P856> ?string . }   Where:  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/prop/direct/P279 has human-readable name "subclass of."  http://www.wikidata.org/entity/Q4830453 has human-readable name "business."  http://www.wikidata.org/prop/direct/P1128 has human-readable name "employees."  http://www.wikidata.org/prop/direct/P856 has human-readable name "official website."  Transform the SPARQL query to a natural language question. Output just the transformed question	What are some businesses with more than 500,000 employees and an official website?	Give me the websites of companies with more than 500000 employees.	Yes			equal to GPT-3 one shot, rating: Yes				
194	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31/wdt:P279* wd:Q11446 . ?uri wdt:P1344/wdt:P710 wd:Q7322 . }    Where:  wdt:P31 has human-readable name "instance of."  wdt:P279 has human-readable name "subclass of."  wd:Q11446 has human-readable name "ship."  wdt:P1344 has human-readable name "participant in."  wdt:P710 has human-readable name "participant."  wd:Q7322 has human-readable name "Christopher Columbus."  Transform the SPARQL query to a natural language question. Output just the transformed question. What were the names of the three ships by Columbus?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 . ?uri wdt:P1813 ?name . FILTER( REGEX( ?name, "^MN$")) }    Where:  wdt:P31 has human-readable name "instance of."  wd:Q35657 has human-readable name "U.S. state."  wdt:P1813 has human-readable name "short name."  Transform the SPARQL query to a natural language question. Output just the transformed question	What are the U.S. states with a short name starting with "MN"?	Which U.S. state has the abbreviation MN?	Yes			equal to GPT-3 one shot, rating: Yes				
49	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT * WHERE { ?uri wdt:P57 wd:Q8006 . }    Where:  wdt:P57 has human-readable name "director."  wd:Q8006 has human-readable name "Akira Kurosawa."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which movies did Kurosawa direct?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> PREFIX p: <http://www.wikidata.org/prop/> PREFIX ps: <http://www.wikidata.org/prop/statement/> SELECT ?frequentflyer WHERE { ?airlines wdt:P31 wd:Q46970 . ?airlines p:P4446/ps:P4446 ?frequentflyer . }  GROUP BY ?frequentflyer ORDER BY DESC(COUNT(?airlines)) LIMIT 1   Where:  wdt:P31 has human-readable name "instance of."  wd:Q46970 has human-readable name "airline."  p:P4446 has human-readable name "reward program."  ps:P4446 has human-readable name "reward program."  Transform the SPARQL query to a natural language question. Output just the transformed question	Which frequent flyer has the most reward programs associated with airlines?	Which frequent flyer program has the most airlines?	No			equal to GPT-3 one shot, rating: No				
92	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT (COUNT(?s1) as ?c) WHERE { ?s1  <http://www.wikidata.org/prop/direct/P31>  <http://www.wikidata.org/entity/Q11424> . ?s1  ?p  <http://www.wikidata.org/entity/Q2009573> .  FILTER (?p = <http://www.wikidata.org/prop/direct/P144> || ?p = <http://www.wikidata.org/prop/direct/P674>) }   Where:  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q11424 has human-readable name "film."  http://www.wikidata.org/entity/Q2009573 has human-readable name "James Bond."  http://www.wikidata.org/prop/direct/P144 has human-readable name "based on."  http://www.wikidata.org/prop/direct/P674 has human-readable name "characters."  Transform the SPARQL query to a natural language question. Output just the transformed question. How many James Bond movies do exist?   ----End Example ----  Having a SPARQL query: PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> ASK WHERE { wd:Q76 wdt:P26 ?obj . ?obj rdfs:label ?label FILTER( REGEX( ?label, "Michelle" ) ) }   Where:  wd:Q76 has human-readable name "Barack Obama."  wdt:P26 has human-readable name "spouse."  rdfs:label has human-readable name "label."  Transform the SPARQL query to a natural language question. Output just the transformed question	Who is Michelle married to?	Is the wife of President Obama called Michelle?	No	missing property: last name		equal to GPT-3 one shot, rating: No				
84	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { wd:Q125054 wdt:P355 ?uri }   Where:  wd:Q125054 has human-readable name "Aldi."  wdt:P355 has human-readable name "has subsidiary."  Transform the SPARQL query to a natural language question. Output just the transformed question. Who owns Aldi?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?o WHERE { <http://www.wikidata.org/entity/Q8740>  <http://www.wikidata.org/prop/direct/P580>  ?startWar . <http://www.wikidata.org/entity/Q8740>  <http://www.wikidata.org/prop/direct/P582>  ?endWar . <http://www.wikidata.org/entity/Q30>  <http://www.wikidata.org/prop/P6> ?blank . ?blank <http://www.wikidata.org/prop/statement/P6> ?o . ?blank <http://www.wikidata.org/prop/qualifier/P580> ?start . ?blank <http://www.wikidata.org/prop/qualifier/P582> ?end . FILTER (?startWar < ?start && ?endWar > ?end)}    Where:  http://www.wikidata.org/entity/Q8740 has human-readable name "Vietnam War."  http://www.wikidata.org/prop/direct/P580 has human-readable name "start time."  http://www.wikidata.org/entity/Q8740 has human-readable name "Vietnam War."  http://www.wikidata.org/prop/direct/P582 has human-readable name "end time."  http://www.wikidata.org/entity/Q30 has human-readable name "United States of America."  http://www.wikidata.org/prop/P6 has human-readable name "head of government."  http://www.wikidata.org/prop/statement/P6 has human-readable name "head of government."  http://www.wikidata.org/prop/qualifier/P580 has human-readable name "start time."  http://www.wikidata.org/prop/qualifier/P582 has human-readable name "end time."  Transform the SPARQL query to a natural language question. Output just the transformed question	Who was the head of government of the United States of America during the Vietnam War?	Which American presidents were in office during the Vietnam War?	Yes			equal to GPT-3 one shot, rating: Yes		equal to GPT-4 one shot, rating: Yes		
144	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT (COUNT(?s1) as ?c) WHERE { ?s1  <http://www.wikidata.org/prop/direct/P31>  <http://www.wikidata.org/entity/Q11424> . ?s1  ?p  <http://www.wikidata.org/entity/Q2009573> .  FILTER (?p = <http://www.wikidata.org/prop/direct/P144> || ?p = <http://www.wikidata.org/prop/direct/P674>) }   Where:  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q11424 has human-readable name "film."  http://www.wikidata.org/entity/Q2009573 has human-readable name "James Bond."  http://www.wikidata.org/prop/direct/P144 has human-readable name "based on."  http://www.wikidata.org/prop/direct/P674 has human-readable name "characters."  Transform the SPARQL query to a natural language question. Output just the transformed question. How many James Bond movies do exist?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q443120> <http://www.wikidata.org/prop/direct/P26> ?uri . }   Where:  http://www.wikidata.org/entity/Q443120 has human-readable name "Lance Bass."  http://www.wikidata.org/prop/direct/P26 has human-readable name "spouse."  Transform the SPARQL query to a natural language question. Output just the transformed question	Who is Lance Bass married to?	Whom did Lance Bass marry?	Yes			equal to GPT-3 one shot, rating: Yes				
96	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q37156>  <http://www.wikidata.org/prop/direct/P2139>  ?o1 .  }   Where:  http://www.wikidata.org/entity/Q37156 has human-readable name "IBM."  http://www.wikidata.org/prop/direct/P2139 has human-readable name "total revenue."  Transform the SPARQL query to a natural language question. Output just the transformed question. What is the revenue of IBM?   ----End Example ----  Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT * WHERE { ?uri wdt:P19 ?birtplace . ?birtplace wdt:P17 wd:Q928 . ?uri wdt:P106  wd:Q13561328 . }   Where:  wdt:P19 has human-readable name "place of birth."  wdt:P17 has human-readable name "country."  wd:Q928 has human-readable name "Philippines."  wdt:P106 has human-readable name "occupation."  wd:Q13561328 has human-readable name "surfer."  Transform the SPARQL query to a natural language question. Output just the transformed question	Where were surfers born in the Philippines?	Which professional surfers were born on the Philippines?	No	wrong semantics		equal to GPT-3 one shot, rating: No				
164	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q359>  <http://www.wikidata.org/prop/direct/P50>  ?o1 .  }   Where:  http://www.wikidata.org/entity/Q359 has human-readable name "WikiLeaks."  http://www.wikidata.org/prop/direct/P50 has human-readable name "author."  Transform the SPARQL query to a natural language question. Output just the transformed question. Who is the author of WikiLeaks?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q43653> <http://www.wikidata.org/prop/direct/P1029> ?uri}   Where:  http://www.wikidata.org/entity/Q43653 has human-readable name "Apollo 11."  http://www.wikidata.org/prop/direct/P1029 has human-readable name "crew member(s)."  Transform the SPARQL query to a natural language question. Output just the transformed question	Who are the crew members of Apollo 11?	Who was on the Apollo 11 mission?	Yes			equal to GPT-3 one shot, rating: Yes				
1	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT ?s1 where  { ?s1 <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q389459> }    Where:  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q389459 has human-readable name "Mars rover."  Transform the SPARQL query to a natural language question. Output just the transformed question. Give me all spacecrafts that flew to Mars.   ----End Example ----  Having a SPARQL query:  SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q37156>  <http://www.wikidata.org/prop/direct/P2139>  ?o1 .  }   Where:  http://www.wikidata.org/entity/Q37156 has human-readable name "IBM."  http://www.wikidata.org/prop/direct/P2139 has human-readable name "total revenue."  Transform the SPARQL query to a natural language question. Output just the transformed question	What is the total revenue of IBM?	What is the revenue of IBM?	Yes		equal to GPT-3 zero shot, rated Yes	equal to GPT-3 one shot, rating: Yes	equal to GPT-4 zero shot, rating: Yes	equal to GPT-4 one shot, rating: Yes		
162	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { wd:Q2246489 wdt:P170 ?uri }    Where:  wd:Q2246489 has human-readable name "The Storm on the Sea of Galilee."  wdt:P170 has human-readable name "creator."  Transform the SPARQL query to a natural language question. Output just the transformed question. Who painted The Storm on the Sea of Galilee?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?n WHERE { wd:Q4138  wdt:P4511 ?n }   Where:  wd:Q4138 has human-readable name "Chiemsee."  wdt:P4511 has human-readable name "vertical depth."  Transform the SPARQL query to a natural language question. Output just the transformed question	What is the vertical depth of Chiemsee?	How deep is Lake Chiemsee?	Yes		equal to GPT-3 zero shot, rated Yes	equal to GPT-3 one shot, rating: Yes	equal to GPT-4 zero shot, rating: Yes	equal to GPT-4 one shot, rating: Yes	equal to Mistral zero shot, rating: Not done	equal to Mistral one shot, rating: Not done
15	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q5284> <http://www.wikidata.org/prop/direct/P19>/<http://www.wikidata.org/prop/direct/P17> ?uri }   Where:  http://www.wikidata.org/entity/Q5284 has human-readable name "Bill Gates."  http://www.wikidata.org/prop/direct/P19 has human-readable name "place of birth."  http://www.wikidata.org/prop/direct/P17 has human-readable name "country."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which country was Bill Gates born in?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?height WHERE { ?uri <http://www.wikidata.org/prop/direct/P106>  <http://www.wikidata.org/entity/Q3665646> . ?uri <http://www.wikidata.org/prop/direct/P54>/<http://www.wikidata.org/prop/direct/P118> <http://www.wikidata.org/entity/Q155223> .  ?uri <http://www.wikidata.org/prop/P54> ?teamMembership . FILTER NOT EXISTS { ?teamMembership <http://www.wikidata.org/prop/qualifier/P582> ?endDate } ?uri  <http://www.wikidata.org/prop/direct/P2048> ?height } ORDER BY ?height LIMIT 1   Where:  http://www.wikidata.org/prop/direct/P106 has human-readable name "occupation."  http://www.wikidata.org/entity/Q3665646 has human-readable name "basketball player."  http://www.wikidata.org/prop/direct/P54 has human-readable name "member of sports team."  http://www.wikidata.org/prop/direct/P118 has human-readable name "league."  http://www.wikidata.org/entity/Q155223 has human-readable name "National Basketball Association."  http://www.wikidata.org/prop/P54 has human-readable name "member of sports team."  http://www.wikidata.org/prop/qualifier/P582 has human-readable name "end time."  http://www.wikidata.org/prop/direct/P2048 has human-readable name "height."  Transform the SPARQL query to a natural language question. Output just the transformed question	What is the height of the shortest basketball player currently playing in the National Basketball Association?	How short is the shortest active NBA player?	Yes			equal to GPT-3 one shot, rating: Yes				
210	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT  (COUNT(DISTINCT ?o1) as ?count)  WHERE { <http://www.wikidata.org/entity/Q33760>  <http://www.wikidata.org/prop/direct/P166>  ?o1 . }    Where:  http://www.wikidata.org/entity/Q33760 has human-readable name "Bertrand Russell."  http://www.wikidata.org/prop/direct/P166 has human-readable name "award received."  Transform the SPARQL query to a natural language question. Output just the transformed question. How many awards has Bertrand Russell?   ----End Example ----  Having a SPARQL query: PREFIX p: <http://www.wikidata.org/prop/> PREFIX ps: <https://w3id.org/payswarm#> PREFIX pq: <http://www.wikidata.org/prop/qualifier/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> PREFIX bd: <http://www.bigdata.com/rdf#> PREFIX wikibase: <http://wikiba.se/ontology#> SELECT DISTINCT ?uri WHERE { { ?uri ?allowed wd:Q9134365 . VALUES ?allowed { wdt:P39 wdt:P97 } } UNION { ?uri wdt:P39 ?position . VALUES ?position { wd:Q116 wd:Q12097  } ?uri p:P39/pq:P642 ?kingdom . } VALUES ?kingdom { wd:Q161885 wd:Q174193 } . ?uri wdt:P26 ?spouse . ?spouse wdt:P19/wdt:P17 wd:Q183 . }   Where:  wd:Q9134365 has human-readable name "monarch of the United Kingdom."  wdt:P39 has human-readable name "position held."  wdt:P97 has human-readable name "noble title."  wdt:P39 has human-readable name "position held."  wd:Q116 has human-readable name "monarch."  wd:Q12097 has human-readable name "king."  p:P39 has human-readable name "position held."  pq:P642 has human-readable name "of."  wd:Q161885 has human-readable name "Kingdom of Great Britain."  wd:Q174193 has human-readable name "United Kingdom of Great Britain and Ireland."  wdt:P26 has human-readable name "spouse."  wdt:P19 has human-readable name "place of birth."  wdt:P17 has human-readable name "country."  wd:Q183 has human-readable name "Germany."  Transform the SPARQL query to a natural language question. Output just the transformed question	Which individuals were monarchs or held a noble title in the Kingdom of Great Britain or the United Kingdom of Great Britain and Ireland, were born in Germany, and had a spouse born in Germany?	Which monarchs of the United Kingdom were married to a German?	No	wrong semantic		equal to GPT-3 one shot, rating: No				
207	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT  (COUNT(DISTINCT ?o1) as ?count)  WHERE { <http://www.wikidata.org/entity/Q33760>  <http://www.wikidata.org/prop/direct/P166>  ?o1 . }    Where:  http://www.wikidata.org/entity/Q33760 has human-readable name "Bertrand Russell."  http://www.wikidata.org/prop/direct/P166 has human-readable name "award received."  Transform the SPARQL query to a natural language question. Output just the transformed question. How many awards has Bertrand Russell?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri { ?uri wdt:P19 ?birthplace . ?uri wdt:P20 ?deathplace . FILTER(?birthplace = ?deathplace) ?uri wdt:P21 wd:Q6581072 . ?uri wdt:P22 ?father . ?father wdt:P97/wdt:P460 wd:Q1128240. ?father wdt:P27*/wdt:P1366*/wdt:P706* wd:Q38272 . }   Where:  wdt:P19 has human-readable name "place of birth."  wdt:P20 has human-readable name "place of death."  wdt:P21 has human-readable name "sex or gender."  wd:Q6581072 has human-readable name "female."  wdt:P22 has human-readable name "father."  wdt:P97 has human-readable name "noble title."  wdt:P460 has human-readable name "said to be the same as."  wd:Q1128240 has human-readable name "earl."  wdt:P27 has human-readable name "country of citizenship."  wdt:P1366 has human-readable name "replaced by."  wdt:P706 has human-readable name "located in/on physical feature."  wd:Q38272 has human-readable name "British Isles."  Transform the SPARQL query to a natural language question. Output just the transformed question	How many females born and died in the same place as their noble title-holding father who was an earl and had British Isles citizenship?	Which daughters of British earls died at the same place they were born at?	Yes			equal to GPT-3 one shot, rating: Yes				
136	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT ?s1 WHERE { ?s1  <http://www.wikidata.org/prop/direct/P17> <http://www.wikidata.org/entity/Q55> . ?s1  <http://www.wikidata.org/prop/direct/P31>  <http://www.wikidata.org/entity/Q7278> .  }    Where:  http://www.wikidata.org/prop/direct/P17 has human-readable name "country."  http://www.wikidata.org/entity/Q55 has human-readable name "Netherlands."  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q7278 has human-readable name "political party."  Transform the SPARQL query to a natural language question. Output just the transformed question. Give me all Dutch parties.   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q111> <http://www.wikidata.org/prop/direct/P398> ?uri  . }   Where:  http://www.wikidata.org/entity/Q111 has human-readable name "Mars."  http://www.wikidata.org/prop/direct/P398 has human-readable name "child astronomical body."  Transform the SPARQL query to a natural language question. Output just the transformed question	Which astronomical bodies are children of Mars?	How many moons does Mars have?	Yes	count not represented		equal to GPT-3 one shot, rating: Yes				
181	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT DISTINCT ?uri WHERE {  ?uri <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q11424> . { ?uri <http://www.wikidata.org/prop/direct/P495> <http://www.wikidata.org/entity/Q213> . } UNION { ?uri <http://www.wikidata.org/prop/direct/P495> <http://www.wikidata.org/entity/Q33946> . } }   Where:  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q11424 has human-readable name "film."  http://www.wikidata.org/prop/direct/P495 has human-readable name "country of origin."  http://www.wikidata.org/entity/Q213 has human-readable name "Czech Republic."  http://www.wikidata.org/prop/direct/P495 has human-readable name "country of origin."  http://www.wikidata.org/entity/Q33946 has human-readable name "Czechoslovakia."  Transform the SPARQL query to a natural language question. Output just the transformed question. Show me all Czech movies.   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q78707> <http://www.wikidata.org/prop/direct/P17> ?uri . }   Where:  http://www.wikidata.org/entity/Q78707 has human-readable name "Yenisey."  http://www.wikidata.org/prop/direct/P17 has human-readable name "country."  Transform the SPARQL query to a natural language question. Output just the transformed question	What is the country of origin for Yenisey?	Through which countries does the Yenisei river flow?	No	wrong semantics		equal to GPT-3 one shot, rating: No				
40	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q471379> <http://www.wikidata.org/prop/direct/P527>/<http://www.wikidata.org/prop/direct/P276> ?uri . ?uri <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q207694>}   Where:  http://www.wikidata.org/entity/Q471379 has human-readable name "The Scream."  http://www.wikidata.org/prop/direct/P527 has human-readable name "has part(s)."  http://www.wikidata.org/prop/direct/P276 has human-readable name "location."  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q207694 has human-readable name "art museum."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which museum exhibits The Scream by Munch?   ----End Example ----  Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?uri WHERE { wd:Q9439 ?childof ?uri . VALUES ?childof { wdt:P22 wdt:P25 }}   Where:  wd:Q9439 has human-readable name "Victoria."  wdt:P22 has human-readable name "father."  wdt:P25 has human-readable name "mother."  Transform the SPARQL query to a natural language question. Output just the transformed question	Who are the parents of Victoria?	Who were the parents of Queen Victoria?	Yes	too general question (label)		equal to GPT-3 one shot, rating: Yes		equal to GPT-4 one shot, rating: Yes		
157	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q2831>  <http://www.wikidata.org/prop/direct/P570>  ?o1 .  }    Where:  http://www.wikidata.org/entity/Q2831 has human-readable name "Michael Jackson."  http://www.wikidata.org/prop/direct/P570 has human-readable name "date of death."  Transform the SPARQL query to a natural language question. Output just the transformed question. When did Michael Jackson die?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q12125895 wdt:P161 ?uri. ?uri wdt:P19 ?birthplace . ?birthplace wdt:P17 wd:Q145 . }   Where:  wd:Q12125895 has human-readable name "Lovesick."  wdt:P161 has human-readable name "cast member."  wdt:P19 has human-readable name "place of birth."  wdt:P17 has human-readable name "country."  wd:Q145 has human-readable name "United Kingdom."  Transform the SPARQL query to a natural language question. Output just the transformed question	Which cast members of the movie "Lovesick" were born in the United Kingdom?	Give me English actors starring in Lovesick.	Yes			equal to GPT-3 one shot, rating: Yes				
79	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri wdt:P19 ?birtplace . ?birtplace wdt:P17 wd:Q408 . ?uri wdt:P106 wd:Q13561328 . }   Where:  wdt:P19 has human-readable name "place of birth."  wdt:P17 has human-readable name "country."  wd:Q408 has human-readable name "Australia."  wdt:P106 has human-readable name "occupation."  wd:Q13561328 has human-readable name "surfer."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which professional surfers were born in Australia?   ----End Example ----  Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> ASK WHERE { { ?uri wdt:P31 wd:Q23413. } UNION { ?uri wdt:P31 ?castlesubtype . ?castlesubtype wdt:P279* wd:Q23413 } ?uri wdt:P17 wd:Q30 }   Where:  wdt:P31 has human-readable name "instance of."  wd:Q23413 has human-readable name "castle."  wdt:P31 has human-readable name "instance of."  wdt:P279 has human-readable name "subclass of."  wd:Q23413 has human-readable name "castle."  wdt:P17 has human-readable name "country."  wd:Q30 has human-readable name "United States of America."  Transform the SPARQL query to a natural language question. Output just the transformed question	Which entities in the United States of America are instances or subclasses of castles?	Are there any castles in the United States?	No	ASK not recognized		equal to GPT-3 one shot, rating: No				
94	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { ?uri wdt:P26 wd:Q240377 }    Where:  wdt:P26 has human-readable name "spouse."  wd:Q240377 has human-readable name "Amanda Palmer."  Transform the SPARQL query to a natural language question. Output just the transformed question. Who is the husband of Amanda Palmer?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?date WHERE { <http://www.wikidata.org/entity/Q9685> <http://www.wikidata.org/prop/direct/P570> ?date  . }   Where:  http://www.wikidata.org/entity/Q9685 has human-readable name "Diana, Princess of Wales."  http://www.wikidata.org/prop/direct/P570 has human-readable name "date of death."  Transform the SPARQL query to a natural language question. Output just the transformed question	When did Diana, Princess of Wales, pass away?	When did princess Diana die?	Yes			equal to GPT-3 one shot, rating: Yes				
103	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT DISTINCT ?uri WHERE { ?uri <http://www.wikidata.org/prop/direct/P106> <http://www.wikidata.org/entity/Q82594> . ?uri <http://www.wikidata.org/prop/direct/P166> ?award . ?award <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q19020> . }   Where:  http://www.wikidata.org/prop/direct/P106 has human-readable name "occupation."  http://www.wikidata.org/entity/Q82594 has human-readable name "computer scientist."  http://www.wikidata.org/prop/direct/P166 has human-readable name "award received."  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q19020 has human-readable name "Academy Awards."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which computer scientist won an oscar?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q1124023> <http://www.wikidata.org/prop/direct/P559> ?uri}   Where:  http://www.wikidata.org/entity/Q1124023 has human-readable name "Piccadilly."  http://www.wikidata.org/prop/direct/P559 has human-readable name "terminus."  Transform the SPARQL query to a natural language question. Output just the transformed question	What is the terminus of Piccadilly?	Where does Piccadilly start?	Yes		equal to GPT-3 zero shot, rated Yes	equal to GPT-3 one shot, rating: Yes				equal to Mistral one shot, rating: Not done
140	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q37156>  <http://www.wikidata.org/prop/direct/P2139>  ?o1 .  }   Where:  http://www.wikidata.org/entity/Q37156 has human-readable name "IBM."  http://www.wikidata.org/prop/direct/P2139 has human-readable name "total revenue."  Transform the SPARQL query to a natural language question. Output just the transformed question. What is the revenue of IBM?   ----End Example ----  Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri wdt:P106 wd:Q901 . ?uri wdt:P69 ?university. wd:Q49113  wdt:P527 ?university . }   Where:  wdt:P106 has human-readable name "occupation."  wd:Q901 has human-readable name "scientist."  wdt:P69 has human-readable name "educated at."  wd:Q49113 has human-readable name "Ivy League."  wdt:P527 has human-readable name "has part(s)."  Transform the SPARQL query to a natural language question. Output just the transformed question	How many scientists who were educated at an Ivy League university have parts related to the university?	How many scientists graduated from an Ivy League university?	No			equal to GPT-3 one shot, rating: No				
82	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT * WHERE { ?uri wdt:P31/wdt:P279* wd:Q7075 . ?uri wdt:P571 ?date . FILTER( YEAR(?date) < 1400 ) }    Where:  wdt:P31 has human-readable name "instance of."  wdt:P279 has human-readable name "subclass of."  wd:Q7075 has human-readable name "library."  wdt:P571 has human-readable name "inception."  Transform the SPARQL query to a natural language question. Output just the transformed question. Give me all libraries established before 1400.   ----End Example ----  Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?date WHERE { wd:Q536133 wdt:P571 ?date . }    Where:  wd:Q536133 has human-readable name "Jack Wolfskin."  wdt:P571 has human-readable name "inception."  Transform the SPARQL query to a natural language question. Output just the transformed question	When was Jack Wolfskin founded?	When was Jack Wolfskin founded?	Yes			equal to GPT-3 one shot, rating: Yes		equal to GPT-4 one shot, rating: Yes		
31	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT * WHERE { ?uri wdt:P57 wd:Q8006 . }    Where:  wdt:P57 has human-readable name "director."  wd:Q8006 has human-readable name "Akira Kurosawa."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which movies did Kurosawa direct?   ----End Example ----  Having a SPARQL query: SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q64>  <http://www.wikidata.org/prop/direct/P6>  ?o1 .  }   Where:  http://www.wikidata.org/entity/Q64 has human-readable name "Berlin."  http://www.wikidata.org/prop/direct/P6 has human-readable name "head of government."  Transform the SPARQL query to a natural language question. Output just the transformed question	Who is the head of government of Berlin?	Who is the mayor of Berlin?	Yes			equal to GPT-3 one shot, rating: Yes	equal to GPT-4 zero shot, rating: Yes	equal to GPT-4 one shot, rating: Yes		
132	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT ?s WHERE { <http://www.wikidata.org/entity/Q241665>  <http://www.wikidata.org/prop/direct/P569>  ?date . ?s <http://www.wikidata.org/prop/direct/P106> / <http://www.wikidata.org/prop/direct/P279>*   <http://www.wikidata.org/entity/Q483501> . ?s  <http://www.wikidata.org/prop/direct/P569>  ?date . }   Where:  http://www.wikidata.org/entity/Q241665 has human-readable name "Rachel Stevens."  http://www.wikidata.org/prop/direct/P569 has human-readable name "date of birth."  http://www.wikidata.org/prop/direct/P106 has human-readable name "occupation."  http://www.wikidata.org/prop/direct/P279 has human-readable name "subclass of."  http://www.wikidata.org/entity/Q483501 has human-readable name "artist."  http://www.wikidata.org/prop/direct/P569 has human-readable name "date of birth."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which artists were born on the same date as Rachel Stevens?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q317521> <http://www.wikidata.org/prop/direct/P61> ?uri . }   Where:  http://www.wikidata.org/entity/Q317521 has human-readable name "Elon Musk."  http://www.wikidata.org/prop/direct/P61 has human-readable name "discoverer or inventor."  Transform the SPARQL query to a natural language question. Output just the transformed question	Who did Elon Musk discover or invent?	What is Elon Musk famous for?	Yes			equal to GPT-3 one shot, rating: Yes				
98	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q248 wdt:P112 ?uri . }     Where:  wd:Q248 has human-readable name "Intel."  wdt:P112 has human-readable name "founded by."  Transform the SPARQL query to a natural language question. Output just the transformed question. Who founded Intel?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?o1 WHERE { <http://www.wikidata.org/entity/Q1048>  <http://www.wikidata.org/prop/direct/P157>  ?o1 .  }   Where:  http://www.wikidata.org/entity/Q1048 has human-readable name "Julius Caesar."  http://www.wikidata.org/prop/direct/P157 has human-readable name "killed by."  Transform the SPARQL query to a natural language question. Output just the transformed question	Who was Julius Caesar killed by?	Who killed Caesar?	Yes			equal to GPT-3 one shot, rating: Yes				
175	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT * { wd:Q1124 wdt:P40 ?child . ?child wdt:P26 ?uri }   Where:  wd:Q1124 has human-readable name "Bill Clinton."  wdt:P40 has human-readable name "child."  wdt:P26 has human-readable name "spouse."  Transform the SPARQL query to a natural language question. Output just the transformed question. Who is the daughter of Bill Clinton married to?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?date WHERE { wd:Q9458 wdt:P570 ?date . }   Where:  wd:Q9458 has human-readable name "Muhammad."  wdt:P570 has human-readable name "date of death."  Transform the SPARQL query to a natural language question. Output just the transformed question	When did Muhammad die?	When did Muhammad die?	Yes			equal to GPT-3 one shot, rating: Yes				
81	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q443120> <http://www.wikidata.org/prop/direct/P26> ?uri . }   Where:  http://www.wikidata.org/entity/Q443120 has human-readable name "Lance Bass."  http://www.wikidata.org/prop/direct/P26 has human-readable name "spouse."  Transform the SPARQL query to a natural language question. Output just the transformed question. Whom did Lance Bass marry?   ----End Example ----  Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?res WHERE { ?res wdt:P6 wd:Q39593 . }   Where:  wdt:P6 has human-readable name "head of government."  wd:Q39593 has human-readable name "Butch Otter."  Transform the SPARQL query to a natural language question. Output just the transformed question	Who is the head of government of Butch Otter?	Butch Otter is the governor of which U.S. state?	No		equal to GPT-3 zero shot, rated No	equal to GPT-3 one shot, rating: No				
10	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { wd:Q5469 wdt:P610 ?uri }   Where:  wd:Q5469 has human-readable name "Karakoram."  wdt:P610 has human-readable name "highest point."  Transform the SPARQL query to a natural language question. Output just the transformed question. What is the highest place of Karakoram?   ----End Example ----  Having a SPARQL query: SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q214341>  <http://www.wikidata.org/prop/direct/P2196>  ?o1 .  }   Where:  http://www.wikidata.org/entity/Q214341 has human-readable name "University of Amsterdam."  http://www.wikidata.org/prop/direct/P2196 has human-readable name "students count."  Transform the SPARQL query to a natural language question. Output just the transformed question	How many students does the University of Amsterdam have?	How many students does the Free University of Amsterdam have?	Yes			equal to GPT-3 one shot, rating: Yes				
168	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT * WHERE { ?uri wdt:P19 ?birtplace . ?birtplace wdt:P17 wd:Q928 . ?uri wdt:P106  wd:Q13561328 . }   Where:  wdt:P19 has human-readable name "place of birth."  wdt:P17 has human-readable name "country."  wd:Q928 has human-readable name "Philippines."  wdt:P106 has human-readable name "occupation."  wd:Q13561328 has human-readable name "surfer."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which professional surfers were born on the Philippines?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q8539> <http://www.wikidata.org/prop/direct/P161> ?uri}   Where:  http://www.wikidata.org/entity/Q8539 has human-readable name "The Big Bang Theory."  http://www.wikidata.org/prop/direct/P161 has human-readable name "cast member."  Transform the SPARQL query to a natural language question. Output just the transformed question	Who are the cast members of "The Big Bang Theory"?	Which actors play in Big Bang Theory?	Yes			equal to GPT-3 one shot, rating: Yes	equal to GPT-4 zero shot, rating: Yes			
169	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX p: <http://www.wikidata.org/prop/> PREFIX ps: <https://w3id.org/payswarm#> PREFIX pq: <http://www.wikidata.org/prop/qualifier/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> PREFIX bd: <http://www.bigdata.com/rdf#> PREFIX wikibase: <http://wikiba.se/ontology#> SELECT DISTINCT ?uri WHERE { { ?uri ?allowed wd:Q9134365 . VALUES ?allowed { wdt:P39 wdt:P97 } } UNION { ?uri wdt:P39 ?position . VALUES ?position { wd:Q116 wd:Q12097  } ?uri p:P39/pq:P642 ?kingdom . } VALUES ?kingdom { wd:Q161885 wd:Q174193 } . ?uri wdt:P26 ?spouse . ?spouse wdt:P19/wdt:P17 wd:Q183 . }   Where:  wd:Q9134365 has human-readable name "monarch of the United Kingdom."  wdt:P39 has human-readable name "position held."  wdt:P97 has human-readable name "noble title."  wdt:P39 has human-readable name "position held."  wd:Q116 has human-readable name "monarch."  wd:Q12097 has human-readable name "king."  p:P39 has human-readable name "position held."  pq:P642 has human-readable name "of."  wd:Q161885 has human-readable name "Kingdom of Great Britain."  wd:Q174193 has human-readable name "United Kingdom of Great Britain and Ireland."  wdt:P26 has human-readable name "spouse."  wdt:P19 has human-readable name "place of birth."  wdt:P17 has human-readable name "country."  wd:Q183 has human-readable name "Germany."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which monarchs of the United Kingdom were married to a German?   ----End Example ----  Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT * WHERE { ?uri wdt:P31/wdt:P279* wd:Q7075 . ?uri wdt:P571 ?date . FILTER( YEAR(?date) < 1400 ) }    Where:  wdt:P31 has human-readable name "instance of."  wdt:P279 has human-readable name "subclass of."  wd:Q7075 has human-readable name "library."  wdt:P571 has human-readable name "inception."  Transform the SPARQL query to a natural language question. Output just the transformed question	What are the libraries that were established before the year 1400?	Give me all libraries established before 1400.	Yes			equal to GPT-3 one shot, rating: Yes				
131	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT * WHERE { ?uri wdt:P31/wdt:P279* wd:Q7075 . ?uri wdt:P571 ?date . FILTER( YEAR(?date) < 1400 ) }    Where:  wdt:P31 has human-readable name "instance of."  wdt:P279 has human-readable name "subclass of."  wd:Q7075 has human-readable name "library."  wdt:P571 has human-readable name "inception."  Transform the SPARQL query to a natural language question. Output just the transformed question. Give me all libraries established before 1400.   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT * { wd:Q843 wdt:P2936 ?uri . }   Where:  wd:Q843 has human-readable name "Pakistan."  wdt:P2936 has human-readable name "language used."  Transform the SPARQL query to a natural language question. Output just the transformed question	What language is used in Pakistan?	What languages are spoken in Pakistan?	Yes		equal to GPT-3 zero shot, rated Yes	equal to GPT-3 one shot, rating: Yes				
160	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q43653> <http://www.wikidata.org/prop/direct/P1029> ?uri}   Where:  http://www.wikidata.org/entity/Q43653 has human-readable name "Apollo 11."  http://www.wikidata.org/prop/direct/P1029 has human-readable name "crew member(s)."  Transform the SPARQL query to a natural language question. Output just the transformed question. Who was on the Apollo 11 mission?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q8337> <http://www.wikidata.org/prop/direct/P50> ?uri}   Where:  http://www.wikidata.org/entity/Q8337 has human-readable name "Harry Potter."  http://www.wikidata.org/prop/direct/P50 has human-readable name "author."  Transform the SPARQL query to a natural language question. Output just the transformed question	Who is the author of Harry Potter?	Who wrote Harry Potter?	Yes			equal to GPT-3 one shot, rating: Yes	equal to GPT-4 zero shot, rating: Yes	equal to GPT-4 one shot, rating: Yes		
129	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT DISTINCT ?o1 WHERE { <http://www.wikidata.org/entity/Q23337>  <http://www.wikidata.org/prop/direct/P421>  ?o1 .  }   Where:  http://www.wikidata.org/entity/Q23337 has human-readable name "Salt Lake City."  http://www.wikidata.org/prop/direct/P421 has human-readable name "located in time zone."  Transform the SPARQL query to a natural language question. Output just the transformed question. What is the time zone of Salt Lake City?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?uri WHERE {  <http://www.wikidata.org/entity/Q5480> <http://www.wikidata.org/prop/direct/P725> ?uri }   Where:  http://www.wikidata.org/entity/Q5480 has human-readable name "Bart Simpson."  http://www.wikidata.org/prop/direct/P725 has human-readable name "voice actor."  Transform the SPARQL query to a natural language question. Output just the transformed question	Who is the voice actor of Bart Simpson?	Who does the voice of Bart Simpson?	Yes			equal to GPT-3 one shot, rating: Yes		equal to GPT-4 one shot, rating: Yes		equal to Mistral one shot, rating: Not done
133	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT (COUNT(?s1) as ?c) WHERE { ?s1  <http://www.wikidata.org/prop/direct/P31>  <http://www.wikidata.org/entity/Q11424> . ?s1  ?p  <http://www.wikidata.org/entity/Q2009573> .  FILTER (?p = <http://www.wikidata.org/prop/direct/P144> || ?p = <http://www.wikidata.org/prop/direct/P674>) }   Where:  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q11424 has human-readable name "film."  http://www.wikidata.org/entity/Q2009573 has human-readable name "James Bond."  http://www.wikidata.org/prop/direct/P144 has human-readable name "based on."  http://www.wikidata.org/prop/direct/P674 has human-readable name "characters."  Transform the SPARQL query to a natural language question. Output just the transformed question. How many James Bond movies do exist?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?uri WHERE {  ?uri <http://www.wikidata.org/prop/direct/P361> <http://www.wikidata.org/entity/Q1381762> . }   Where:  http://www.wikidata.org/prop/direct/P361 has human-readable name "part of."  http://www.wikidata.org/entity/Q1381762 has human-readable name "Teenage Mutant Ninja Turtles."  Transform the SPARQL query to a natural language question. Output just the transformed question	Which items are part of "Teenage Mutant Ninja Turtles"?	What are the names of the Teenage Mutant Ninja Turtles?	Yes	???		equal to GPT-3 one shot, rating: Yes				
62	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31 wd:Q35657 . ?uri wdt:P2046 ?area . } ORDER BY DESC(?area) LIMIT 1   Where:  wdt:P31 has human-readable name "instance of."  wd:Q35657 has human-readable name "U.S. state."  wdt:P2046 has human-readable name "area."  Transform the SPARQL query to a natural language question. Output just the transformed question. What is the largest state in the United States?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { wd:Q5469 wdt:P610 ?uri }   Where:  wd:Q5469 has human-readable name "Karakoram."  wdt:P610 has human-readable name "highest point."  Transform the SPARQL query to a natural language question. Output just the transformed question	What is the highest point of Mount Karakoram?	What is the highest place of Karakoram?	No	mount karakoram is not existing		equal to GPT-3 one shot, rating: No				
174	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q91 wdt:P20 ?uri . }   Where:  wd:Q91 has human-readable name "Abraham Lincoln."  wdt:P20 has human-readable name "place of death."  Transform the SPARQL query to a natural language question. Output just the transformed question. Where did Abraham Lincoln die?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q45875 ?p ?uri . ?uri wdt:P106 wd:Q6625963 . }   Where:  wd:Q45875 has human-readable name "A Song of Ice and Fire."  wdt:P106 has human-readable name "occupation."  wd:Q6625963 has human-readable name "novelist."  Transform the SPARQL query to a natural language question. Output just the transformed question	What novelist wrote "A Song of Ice and Fire"?	Who is the novelist of the work a song of ice and fire?	Yes			equal to GPT-3 one shot, rating: Yes				
178	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { wd:Q52 wdt:P170 ?uri . ?uri wdt:P31 wd:Q5 . }   Where:  wd:Q52 has human-readable name "Wikipedia."  wdt:P170 has human-readable name "creator."  wdt:P31 has human-readable name "instance of."  wd:Q5 has human-readable name "human."  Transform the SPARQL query to a natural language question. Output just the transformed question. Who created English Wikipedia?   ----End Example ----  Having a SPARQL query:  SELECT (COUNT(?s1) as ?c) WHERE { ?s1  <http://www.wikidata.org/prop/direct/P31>  <http://www.wikidata.org/entity/Q11424> . ?s1  ?p  <http://www.wikidata.org/entity/Q2009573> .  FILTER (?p = <http://www.wikidata.org/prop/direct/P144> || ?p = <http://www.wikidata.org/prop/direct/P674>) }   Where:  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q11424 has human-readable name "film."  http://www.wikidata.org/entity/Q2009573 has human-readable name "James Bond."  http://www.wikidata.org/prop/direct/P144 has human-readable name "based on."  http://www.wikidata.org/prop/direct/P674 has human-readable name "characters."  Transform the SPARQL query to a natural language question. Output just the transformed question	How many films are based on or have characters from the James Bond series?	How many James Bond movies do exist?	Yes			equal to GPT-3 one shot, rating: Yes				
104	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q78707> <http://www.wikidata.org/prop/direct/P17> ?uri . }   Where:  http://www.wikidata.org/entity/Q78707 has human-readable name "Yenisey."  http://www.wikidata.org/prop/direct/P17 has human-readable name "country."  Transform the SPARQL query to a natural language question. Output just the transformed question. Through which countries does the Yenisei river flow?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q25310> <http://www.wikidata.org/prop/direct/P40> ?daughter . ?daughter  <http://www.wikidata.org/prop/direct/P21> <http://www.wikidata.org/entity/Q6581072> . ?daughter  <http://www.wikidata.org/prop/direct/P26> ?uri .}   Where:  http://www.wikidata.org/entity/Q25310 has human-readable name "Robert F. Kennedy."  http://www.wikidata.org/prop/direct/P40 has human-readable name "child."  http://www.wikidata.org/prop/direct/P21 has human-readable name "sex or gender."  http://www.wikidata.org/entity/Q6581072 has human-readable name "female."  http://www.wikidata.org/prop/direct/P26 has human-readable name "spouse."  Transform the SPARQL query to a natural language question. Output just the transformed question	Who are the wives of Robert F. Kennedy's daughters?	Who is the daughter of Robert Kennedy married to?	No	wrong semantics		equal to GPT-3 one shot, rating: No				
182	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { wd:Q11185669 wdt:P279 ?uri . }   Where:  wd:Q11185669 has human-readable name "millipede."  wdt:P279 has human-readable name "subclass of."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which classes does the Millepede belong to?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P141 wd:Q219127 }   Where:  wdt:P141 has human-readable name "IUCN conservation status."  wd:Q219127 has human-readable name "Critically Endangered."  Transform the SPARQL query to a natural language question. Output just the transformed question	What are the different classes with the conservation status of "Critically Endangered"?	Which animals are critically endangered?	No			equal to GPT-3 one shot, rating: No				
128	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q164791>  <http://www.wikidata.org/prop/direct/P570>  ?o1 .  }   Where:  http://www.wikidata.org/entity/Q164791 has human-readable name "Carlo Giuliani."  http://www.wikidata.org/prop/direct/P570 has human-readable name "date of death."  Transform the SPARQL query to a natural language question. Output just the transformed question. When was Carlo Giuliani shot?   ----End Example ----  Having a SPARQL query:  SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q359>  <http://www.wikidata.org/prop/direct/P50>  ?o1 .  }   Where:  http://www.wikidata.org/entity/Q359 has human-readable name "WikiLeaks."  http://www.wikidata.org/prop/direct/P50 has human-readable name "author."  Transform the SPARQL query to a natural language question. Output just the transformed question	Who is the author of WikiLeaks?	Who is the author of WikiLeaks?	Yes		equal to GPT-3 zero shot, rated Yes	equal to GPT-3 one shot, rating: Yes	equal to GPT-4 zero shot, rating: Yes	equal to GPT-4 one shot, rating: Yes		equal to Mistral one shot, rating: Not done
203	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT ?s1 WHERE { ?s1  <http://www.wikidata.org/prop/direct/P17> <http://www.wikidata.org/entity/Q55> . ?s1  <http://www.wikidata.org/prop/direct/P31>  <http://www.wikidata.org/entity/Q7278> .  }    Where:  http://www.wikidata.org/prop/direct/P17 has human-readable name "country."  http://www.wikidata.org/entity/Q55 has human-readable name "Netherlands."  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q7278 has human-readable name "political party."  Transform the SPARQL query to a natural language question. Output just the transformed question. Give me all Dutch parties.   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q2831> <http://www.wikidata.org/prop/direct/P509> ?uri . }   Where:  http://www.wikidata.org/entity/Q2831 has human-readable name "Michael Jackson."  http://www.wikidata.org/prop/direct/P509 has human-readable name "cause of death."  Transform the SPARQL query to a natural language question. Output just the transformed question	What was the cause of death of Michael Jackson?	How did Michael Jackson die?	Yes			equal to GPT-3 one shot, rating: Yes				
51	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { ?uri wdt:P31 wd:Q35657 . ?uri wdt:P571 ?date } ORDER BY DESC(?date) LIMIT 1   Where:  wdt:P31 has human-readable name "instance of."  wd:Q35657 has human-readable name "U.S. state."  wdt:P571 has human-readable name "inception."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which U.S. state has been admitted latest?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?date WHERE { wd:Q6667101 wdt:P577 ?date }   Where:  wd:Q6667101 has human-readable name "Worst Case Scenario."  wdt:P577 has human-readable name "publication date."  Transform the SPARQL query to a natural language question. Output just the transformed question	When was the publication date of the "Worst Case Scenario"?	When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?	Yes	Semantics of original question is not covered.		equal to GPT-3 one shot, rating: Yes				
137	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { wd:Q1439 wdt:P1313 wd:Q5589725 . wd:Q5589725 wdt:P1308 ?uri . }   Where:  wd:Q1439 has human-readable name "Texas."  wdt:P1313 has human-readable name "office held by head of government."  wd:Q5589725 has human-readable name "Governor of Texas."  wd:Q5589725 has human-readable name "Governor of Texas."  wdt:P1308 has human-readable name "officeholder."  Transform the SPARQL query to a natural language question. Output just the transformed question. Who is the governor of Texas?   ----End Example ----  Having a SPARQL query:  SELECT ?s1 WHERE { ?s1  <http://www.wikidata.org/prop/direct/P17> <http://www.wikidata.org/entity/Q55> . ?s1  <http://www.wikidata.org/prop/direct/P31>  <http://www.wikidata.org/entity/Q7278> .  }    Where:  http://www.wikidata.org/prop/direct/P17 has human-readable name "country."  http://www.wikidata.org/entity/Q55 has human-readable name "Netherlands."  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q7278 has human-readable name "political party."  Transform the SPARQL query to a natural language question. Output just the transformed question	What are the political parties in the Netherlands?	Give me all Dutch parties.	Yes			equal to GPT-3 one shot, rating: Yes	equal to GPT-4 zero shot, rating: Yes	equal to GPT-4 one shot, rating: Yes		
150	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT (COUNT(?s1) as ?c) WHERE { ?s1  <http://www.wikidata.org/prop/direct/P31>  <http://www.wikidata.org/entity/Q11424> . ?s1  ?p  <http://www.wikidata.org/entity/Q2009573> .  FILTER (?p = <http://www.wikidata.org/prop/direct/P144> || ?p = <http://www.wikidata.org/prop/direct/P674>) }   Where:  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q11424 has human-readable name "film."  http://www.wikidata.org/entity/Q2009573 has human-readable name "James Bond."  http://www.wikidata.org/prop/direct/P144 has human-readable name "based on."  http://www.wikidata.org/prop/direct/P674 has human-readable name "characters."  Transform the SPARQL query to a natural language question. Output just the transformed question. How many James Bond movies do exist?   ----End Example ----  Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q236> <http://www.wikidata.org/prop/direct/P35>/<http://www.wikidata.org/prop/direct/P19> ?uri . ?uri <http://www.wikidata.org/prop/direct/P31> <http://www.wikidata.org/entity/Q515> . }   Where:  http://www.wikidata.org/entity/Q236 has human-readable name "Montenegro."  http://www.wikidata.org/prop/direct/P35 has human-readable name "head of state."  http://www.wikidata.org/prop/direct/P19 has human-readable name "place of birth."  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/entity/Q515 has human-readable name "city."  Transform the SPARQL query to a natural language question. Output just the transformed question	Where was the birthplace of the head of state of Montenegro?	In which city was the president of Montenegro born?	Yes			equal to GPT-3 one shot, rating: Yes				
115	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q317521> <http://www.wikidata.org/prop/direct/P61> ?uri . }   Where:  http://www.wikidata.org/entity/Q317521 has human-readable name "Elon Musk."  http://www.wikidata.org/prop/direct/P61 has human-readable name "discoverer or inventor."  Transform the SPARQL query to a natural language question. Output just the transformed question. What is Elon Musk famous for?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT (COUNT(?uri) AS ?c) WHERE { ?uri wdt:P131 wd:Q1456 . ?uri wdt:P31/wdt:P279* wd:Q23397 . }   Where:  wdt:P131 has human-readable name "located in the administrative territorial entity."  wd:Q1456 has human-readable name "South Carolina."  wdt:P31 has human-readable name "instance of."  wdt:P279 has human-readable name "subclass of."  wd:Q23397 has human-readable name "lake."  Transform the SPARQL query to a natural language question. Output just the transformed question	How many lakes are located in South Carolina?	How many rivers and lakes are in South Carolina?	Yes	original query was incomplete	equal to GPT-3 zero shot, rated Yes	equal to GPT-3 one shot, rating: Yes				
214	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P106 wd:Q49757 . ?x wdt:P50 ?uri ; wdt:P31 wd:Q571 . } GROUP BY ?uri ORDER BY DESC(COUNT(?x)) LIMIT 1   Where:  wdt:P106 has human-readable name "occupation."  wd:Q49757 has human-readable name "poet."  wdt:P50 has human-readable name "author."  wdt:P31 has human-readable name "instance of."  wd:Q571 has human-readable name "book."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which poet wrote the most books?   ----End Example ----  Having a SPARQL query:  SELECT ?s1 WHERE { ?s1  <http://www.wikidata.org/prop/direct/P641> <http://www.wikidata.org/entity/Q842284> . ?s1  <http://www.wikidata.org/prop/direct/P19> ?o1 . ?o1 <http://www.wikidata.org/prop/direct/P131>* <http://www.wikidata.org/entity/Q34> . }   Where:  http://www.wikidata.org/prop/direct/P641 has human-readable name "sport."  http://www.wikidata.org/entity/Q842284 has human-readable name "skateboarding."  http://www.wikidata.org/prop/direct/P19 has human-readable name "place of birth."  http://www.wikidata.org/prop/direct/P131 has human-readable name "located in the administrative territorial entity."  http://www.wikidata.org/entity/Q34 has human-readable name "Sweden."  Transform the SPARQL query to a natural language question. Output just the transformed question	Where was the skater born in Sweden?	Give me all professional skateboarders from Sweden.	No			equal to GPT-3 one shot, rating: No				
64	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q567> <http://www.wikidata.org/prop/direct/P1477>  ?o1 .  }   Where:  http://www.wikidata.org/entity/Q567 has human-readable name "Angela Merkel."  http://www.wikidata.org/prop/direct/P1477 has human-readable name "birth name."  Transform the SPARQL query to a natural language question. Output just the transformed question. What is Angela Merkel’s birth name?   ----End Example ----  Having a SPARQL query: SELECT ?o1 WHERE { <http://www.wikidata.org/entity/Q7934>  <http://www.wikidata.org/prop/direct/P106>  ?o1 .  }   Where:  http://www.wikidata.org/entity/Q7934 has human-readable name "Frank Herbert."  http://www.wikidata.org/prop/direct/P106 has human-readable name "occupation."  Transform the SPARQL query to a natural language question. Output just the transformed question	What is Frank Herbert's occupation?	What is the profession of Frank Herbert?	Yes			equal to GPT-3 one shot, rating: Yes				
87	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P50 wd:Q72653 . ?uri wdt:P136 ?genre . ?genre wdt:P279* wd:Q571 . }   Where:  wdt:P50 has human-readable name "author."  wd:Q72653 has human-readable name "Danielle Steel."  wdt:P136 has human-readable name "genre."  wdt:P279 has human-readable name "subclass of."  wd:Q571 has human-readable name "book."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which books were written by Danielle Steel?   ----End Example ----  Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT DISTINCT ?uri WHERE { ?uri wdt:P31/wdt:P279* wd:Q571 . ?uri wdt:P1104 ?number . } ORDER BY DESC(?number) LIMIT 1   Where:  wdt:P31 has human-readable name "instance of."  wdt:P279 has human-readable name "subclass of."  wd:Q571 has human-readable name "book."  wdt:P1104 has human-readable name "number of pages."  Transform the SPARQL query to a natural language question. Output just the transformed question	What is the book with the highest number of pages?	Which book has the most pages?	Yes			equal to GPT-3 one shot, rating: Yes				
102	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?date WHERE { wd:Q9458 wdt:P570 ?date . }   Where:  wd:Q9458 has human-readable name "Muhammad."  wdt:P570 has human-readable name "date of death."  Transform the SPARQL query to a natural language question. Output just the transformed question. When did Muhammad die?   ----End Example ----  Having a SPARQL query: PREFIX wd: <http://www.wikidata.org/entity/> PREFIX wdt: <http://www.wikidata.org/prop/direct/> SELECT ?date WHERE { wd:Q3266236 wdt:P170 ?author . ?author wdt:P570 ?date }   Where:  wd:Q3266236 has human-readable name "Count Dracula."  wdt:P170 has human-readable name "creator."  wdt:P570 has human-readable name "date of death."  Transform the SPARQL query to a natural language question. Output just the transformed question	When did Count Dracula's creator die?	When did Dracula's creator die?	Yes			equal to GPT-3 one shot, rating: Yes				
111	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query:  SELECT DISTINCT ?s1 WHERE { ?s1  <http://www.wikidata.org/prop/direct/P30>  <http://www.wikidata.org/entity/Q15> . ?s1  <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>*  <http://www.wikidata.org/entity/Q8072> . ?s1 <http://www.wikidata.org/prop/direct/P2044> ?o1 . } ORDER BY DESC(?o1) LIMIT 1   Where:  http://www.wikidata.org/prop/direct/P30 has human-readable name "continent."  http://www.wikidata.org/entity/Q15 has human-readable name "Africa."  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/prop/direct/P279 has human-readable name "subclass of."  http://www.wikidata.org/entity/Q8072 has human-readable name "volcano."  http://www.wikidata.org/prop/direct/P2044 has human-readable name "elevation above sea level."  Transform the SPARQL query to a natural language question. Output just the transformed question. What is the highest volcano in Africa?   ----End Example ----  Having a SPARQL query:  SELECT  (COUNT(DISTINCT ?o1) as ?count)  WHERE { <http://www.wikidata.org/entity/Q33760>  <http://www.wikidata.org/prop/direct/P166>  ?o1 . }    Where:  http://www.wikidata.org/entity/Q33760 has human-readable name "Bertrand Russell."  http://www.wikidata.org/prop/direct/P166 has human-readable name "award received."  Transform the SPARQL query to a natural language question. Output just the transformed question	How many awards has Bertrand Russell received?	How many awards has Bertrand Russell?	Yes			equal to GPT-3 one shot, rating: Yes		equal to GPT-4 one shot, rating: Yes		
50	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { { wd:Q76936 wdt:P527+ ?uri . } UNION { wd:Q76936 wdt:P527* ?islandgroup . ?uri wdt:P361+ ?islandgroup . } ?uri wdt:P17 wd:Q55 . ?uri wdt:P31 wd:Q23442 . }    Where:  wd:Q76936 has human-readable name "Frisian Islands."  wdt:P527 has human-readable name "has part(s)."  wd:Q76936 has human-readable name "Frisian Islands."  wdt:P527 has human-readable name "has part(s)."  wdt:P361 has human-readable name "part of."  wdt:P17 has human-readable name "country."  wd:Q55 has human-readable name "Netherlands."  wdt:P31 has human-readable name "instance of."  wd:Q23442 has human-readable name "island."  Transform the SPARQL query to a natural language question. Output just the transformed question. Give me all Frisian islands that belong to the Netherlands.   ----End Example ----  Having a SPARQL query:  SELECT DISTINCT ?s1 WHERE { ?s1  <http://www.wikidata.org/prop/direct/P30>  <http://www.wikidata.org/entity/Q15> . ?s1  <http://www.wikidata.org/prop/direct/P31>/<http://www.wikidata.org/prop/direct/P279>*  <http://www.wikidata.org/entity/Q8072> . ?s1 <http://www.wikidata.org/prop/direct/P2044> ?o1 . } ORDER BY DESC(?o1) LIMIT 1   Where:  http://www.wikidata.org/prop/direct/P30 has human-readable name "continent."  http://www.wikidata.org/entity/Q15 has human-readable name "Africa."  http://www.wikidata.org/prop/direct/P31 has human-readable name "instance of."  http://www.wikidata.org/prop/direct/P279 has human-readable name "subclass of."  http://www.wikidata.org/entity/Q8072 has human-readable name "volcano."  http://www.wikidata.org/prop/direct/P2044 has human-readable name "elevation above sea level."  Transform the SPARQL query to a natural language question. Output just the transformed question	What is the highest volcano in Africa in terms of elevation above sea level?	What is the highest volcano in Africa?	Yes			equal to GPT-3 one shot, rating: Yes				
197	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?n WHERE { wd:Q4138  wdt:P4511 ?n }   Where:  wd:Q4138 has human-readable name "Chiemsee."  wdt:P4511 has human-readable name "vertical depth."  Transform the SPARQL query to a natural language question. Output just the transformed question. How deep is Lake Chiemsee?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT ?uri WHERE { ?uri wdt:P31 wd:Q35657 . ?uri wdt:P571 ?date } ORDER BY DESC(?date) LIMIT 1   Where:  wdt:P31 has human-readable name "instance of."  wd:Q35657 has human-readable name "U.S. state."  wdt:P571 has human-readable name "inception."  Transform the SPARQL query to a natural language question. Output just the transformed question	When was the most recent U.S. state established?	Which U.S. state has been admitted latest?	Yes			equal to GPT-3 one shot, rating: Yes				
116	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> PREFIX p: <http://www.wikidata.org/prop/> PREFIX ps: <http://www.wikidata.org/prop/statement/> SELECT ?frequentflyer WHERE { ?airlines wdt:P31 wd:Q46970 . ?airlines p:P4446/ps:P4446 ?frequentflyer . }  GROUP BY ?frequentflyer ORDER BY DESC(COUNT(?airlines)) LIMIT 1   Where:  wdt:P31 has human-readable name "instance of."  wd:Q46970 has human-readable name "airline."  p:P4446 has human-readable name "reward program."  ps:P4446 has human-readable name "reward program."  Transform the SPARQL query to a natural language question. Output just the transformed question. Which frequent flyer program has the most airlines?   ----End Example ----  Having a SPARQL query: PREFIX skos: <http://www.w3.org/2004/02/skos/core#> SELECT * WHERE { ?uri skos:altLabel "Rodzilla"@en . }   Where:  skos:altLabel has human-readable name "alternative label."  Transform the SPARQL query to a natural language question. Output just the transformed question	What is another label for "Rodzilla"?	Who was called Rodzilla?	Yes	human would not use this question		equal to GPT-3 one shot, rating: Yes				
189	gpt-3.5-turbo	en	ONE_SHOT	---- Start Example ----   Having a SPARQL query: SELECT DISTINCT ?uri WHERE { <http://www.wikidata.org/entity/Q317521> <http://www.wikidata.org/prop/direct/P61> ?uri . }   Where:  http://www.wikidata.org/entity/Q317521 has human-readable name "Elon Musk."  http://www.wikidata.org/prop/direct/P61 has human-readable name "discoverer or inventor."  Transform the SPARQL query to a natural language question. Output just the transformed question. What is Elon Musk famous for?   ----End Example ----  Having a SPARQL query: PREFIX wdt: <http://www.wikidata.org/prop/direct/> PREFIX wd: <http://www.wikidata.org/entity/> SELECT DISTINCT ?uri WHERE { ?album wdt:P31 wd:Q482994 ; wdt:P175 wd:Q1299 ; wdt:P577 ?date ; wdt:P483 ?uri . } ORDER BY ?date LIMIT 1   Where:  wdt:P31 has human-readable name "instance of."  wd:Q482994 has human-readable name "album."  wdt:P175 has human-readable name "performer."  wd:Q1299 has human-readable name "The Beatles."  wdt:P577 has human-readable name "publication date."  wdt:P483 has human-readable name "recorded at studio or venue."  Transform the SPARQL query to a natural language question. Output just the transformed question	What is the latest album recorded by The Beatles at a studio or venue?	In which studio did the Beatles record their first album?	No			equal to GPT-3 one shot, rating: No				
														
							2							
							82	82.00%						
							18	18.00%						